field val: Int

domain IArray {
  function loc(a: IArray, i: Int): Ref
  function len(a: IArray): Int
  function first(r: Ref): IArray
  function second(r: Ref): Int
  
  axiom all_diff {
    forall a: IArray, i: Int :: {loc(a, i)}
      first(loc(a, i)) == a && second(loc(a, i)) == i
  }

  axiom length_nonneg {
    forall a: IArray :: len(a) >= 0
  }
}

method test01(a: IArray, n: Int)
{
  loc(a, 1).val := loc(a, 0).val + loc(a, 1).val
}


method test03(a: IArray, lenA:Int, left: Int, right: Int, pw1: Int, pw2: Int) {
  inhale left == 0
  inhale right <= lenA

  inhale 0 <= left && left < right && right < lenA

  inhale forall i: Int :: left <= i && i<right+1 ==> acc(loc(a, i).val)

  inhale forall j: Int :: 0 <= j - left && j - left < pw1 ==> acc(loc(a, j).val)
  inhale forall j: Int :: 0 <= j && j < pw2 ==> acc(loc(a, j).val)

  assert forall j: Int :: 0 <= j && j < pw1 ==> acc(loc(a, j).val)
  assert forall k: Int :: 0 <= k - left && k - left < pw2 ==> acc(loc(a, k).val)
}
