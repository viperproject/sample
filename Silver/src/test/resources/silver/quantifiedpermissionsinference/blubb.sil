domain Array {
  
  function loc(a: Array, i: Int): Ref
  
  function length(a: Array): Int
  
  function ref_to_array(ref: Ref): Array
  
  function ref_to_index(ref: Ref): Int
  
  axiom all_diff {
    (forall a: Array, i: Int :: { loc(a, i) } 0 <= i ==> ref_to_array(loc(a, i)) == a && ref_to_index(loc(a, i)) == i)
  }
  
  axiom length_nonneg {
    (forall a: Array :: length(a) >= 0)
  }
}

field val: Int

function p(q: Int, bound: Int, rdAmount: Perm): Perm
  ensures (bound >= 11 && bound <= 20 && bound >= 12 && ((q != 10 || result == rdAmount) && (q == 10 || result == none)) || q >= 9 && bound >= 2 + q && bound <= 20 && bound >= 12 && result == none || q >= 10 && bound >= 1 + q && bound <= 20 && bound >= 12 && result == rdAmount) && ((bound < 11 || bound > 20 || bound < 12 || (q != 10 || result >= rdAmount) && (q == 10 || result >= none)) && (q < 10 || bound < 1 + q || bound > 20 || bound < 12 || result >= rdAmount) && (q < 9 || bound < 2 + q || bound > 20 || bound < 12 || result >= none))


function p0(q: Int, bound: Int, rdAmount: Perm, i: Int): Perm
  ensures (i >= 0 && ((q != i || (q == i || p(q, bound, rdAmount) < none) || rdAmount < p(q, bound, rdAmount) || result == rdAmount) && (q != i || (q == i || p(q, bound, rdAmount) > none) || result == rdAmount) && (q != i || (q != i || p(q, bound, rdAmount) < write) || rdAmount < p(q, bound, rdAmount) || result == rdAmount) && (q != i || write < p(q, bound, rdAmount) || q != i || result == write) && (q != i || write < p(q, bound, rdAmount) || q == i || result == write) && (q == i || p(q, bound, rdAmount) < none || q != i || p(q, bound, rdAmount) < rdAmount || result == p(q, bound, rdAmount)) && (q != i || p(q, bound, rdAmount) < write || q != i || p(q, bound, rdAmount) < rdAmount || result == p(q, bound, rdAmount)) && (q == i || p(q, bound, rdAmount) < none || q == i || p(q, bound, rdAmount) < none || result == p(q, bound, rdAmount)) && (q != i || p(q, bound, rdAmount) < write || q == i || p(q, bound, rdAmount) < none || result == p(q, bound, rdAmount)) && (q == i || (q == i || p(q, bound, rdAmount) < none) || p(q, bound, rdAmount) > none || result == none) && (q == i || p(q, bound, rdAmount) > none || q == i || result == none) && (q == i || (q == i || p(q, bound, rdAmount) > none) || result == none) && (q == i || (q != i || p(q, bound, rdAmount) < write) || p(q, bound, rdAmount) > none || result == none)) || q + 1 >= i && 3 + i >= q && i >= 0 && ((p(q, bound, rdAmount) < none || result == p(q, bound, rdAmount)) && (p(q, bound, rdAmount) < none || p(q, bound, rdAmount) > none || result == none) && (p(q, bound, rdAmount) > none || result == none) && (p(q, bound, rdAmount) > none || result == none)) || q >= i && 4 + i >= q && i >= 0 && ((p(q, bound, rdAmount) < write || rdAmount < p(q, bound, rdAmount) || result == rdAmount) && (write < p(q, bound, rdAmount) || result == write) && (p(q, bound, rdAmount) < write || p(q, bound, rdAmount) < rdAmount || result == p(q, bound, rdAmount)))) && ((i < 0 || (q != i || (q == i || p(q, bound, rdAmount) < none) || rdAmount < p(q, bound, rdAmount) || result >= rdAmount) && (q != i || (q == i || p(q, bound, rdAmount) > none) || result >= rdAmount) && (q != i || (q != i || p(q, bound, rdAmount) < write) || rdAmount < p(q, bound, rdAmount) || result >= rdAmount) && (q != i || write < p(q, bound, rdAmount) || q != i || result >= write) && (q != i || write < p(q, bound, rdAmount) || q == i || result >= write) && (q == i || p(q, bound, rdAmount) < none || q != i || p(q, bound, rdAmount) < rdAmount || result >= p(q, bound, rdAmount)) && (q != i || p(q, bound, rdAmount) < write || q != i || p(q, bound, rdAmount) < rdAmount || result >= p(q, bound, rdAmount)) && (q == i || p(q, bound, rdAmount) < none || q == i || p(q, bound, rdAmount) < none || result >= p(q, bound, rdAmount)) && (q != i || p(q, bound, rdAmount) < write || q == i || p(q, bound, rdAmount) < none || result >= p(q, bound, rdAmount)) && (q == i || (q == i || p(q, bound, rdAmount) < none) || p(q, bound, rdAmount) > none || result >= none) && (q == i || p(q, bound, rdAmount) > none || q == i || result >= none) && (q == i || (q == i || p(q, bound, rdAmount) > none) || result >= none) && (q == i || (q != i || p(q, bound, rdAmount) < write) || p(q, bound, rdAmount) > none || result >= none)) && (q < i || 4 + i < q || i < 0 || (p(q, bound, rdAmount) < write || rdAmount < p(q, bound, rdAmount) || result >= rdAmount) && (write < p(q, bound, rdAmount) || result >= write) && (p(q, bound, rdAmount) < write || p(q, bound, rdAmount) < rdAmount || result >= p(q, bound, rdAmount))) && (q + 1 < i || 3 + i < q || i < 0 || (p(q, bound, rdAmount) < none || result >= p(q, bound, rdAmount)) && (p(q, bound, rdAmount) < none || p(q, bound, rdAmount) > none || result >= none) && (p(q, bound, rdAmount) > none || result >= none) && (p(q, bound, rdAmount) > none || result >= none)))


function p1(q: Int, bound: Int, rdAmount: Perm): Perm
  ensures result == p(q, bound, rdAmount) && result >= p(q, bound, rdAmount)


method basic(arr: Array, foo: Bool, rdAmount: Perm)
  requires none < rdAmount && rdAmount < write
  requires (forall q: Int :: acc(loc(arr, q).val, p0(q, bound, rdAmount, i)))
{
  var i: Int
  var j: Int
  var bound: Int
  i := 0
  j := i
  while (i < 10)
    invariant none < rdAmount && rdAmount < write
    invariant (forall q: Int :: acc(loc(arr, q).val, p0(q, bound, rdAmount, i)))
    invariant j >= i && i >= 0 
  {
    j := i
    while (j < i + 5)
      invariant none < rdAmount && rdAmount < write
      invariant (forall q: Int :: acc(loc(arr, q).val, p0(q, bound, rdAmount, i)))
      invariant j >= i && i >= 0 
    {
      loc(arr, j).val := i
      j := j + 1
    }
    i := i + 4
  }
  if (foo) {
    bound := 12
  } else {
    bound := 20
  }
  while (i < bound)
    invariant none < rdAmount && rdAmount < write
    invariant (forall q: Int :: acc(loc(arr, q).val, p(q, bound, rdAmount)))
    invariant i >= 10 && bound <= 20 && bound >= 12 
  {
    j := loc(arr, i).val
    i := i + 1
  }
}