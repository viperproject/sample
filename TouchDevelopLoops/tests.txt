
action main() {
  code→for1(0)→post_to_wall;
}

action for1(a: Number) returns r: Number {
  $r := $a;
  for 0 ≤ i < 5 do {
    $r := $r + 1;
  }
}

action for1b(a: Number) returns r: Number {
  $r := 0;
  $x := 10;
  for 0 ≤ i < $x do {
    $r := $r + 1;
  }
}

action for5(a1: Number, a2: Number, a3: Number, a4: Number) returns r: Number {
  $r := 0;
  $x := $a1 + $a2;
  $y := $a3 - $a4;
  $z := $x + 2*$y;
  for 0 ≤ i < $z do {
    $r := $r + 1;
  }
}

action for2(a: Number) returns r: Number {
  $r := $a;
  $x := $a;
  $y := 2;
  for 0 ≤ i < $x-2*$y do {
    $r := $r + 1;
  }
}

action for2b(a1: Number, a2: Number) returns r: Number {
  $r := 0;
  $x := $a1;
  $y := $a2;
  for 0 ≤ i < $x+2*$y do {
    $r := $r + 1;
  }
}

action for3(a: Number) returns r: Number {
  $r := $a;
  $x := 100;
  $y := 1;
  for 0 ≤ i < $x + $y do {
    $x := $x - 2;
    $y := $y + 2;
    $r := $r + 1;
  }
}


action for3b(a: Number) returns r: Number {
  $r := $a;
  $x := 100;
  $y := 1;
  for 0 ≤ i < $x + $y do {
    $x := $x - 2;
    $y := $y + 1;
    $r := $r + 1;
  }
}


action for3c(a: Number) returns r: Number {
  $r := $a;
  $x := 100;
  $y := 1;
  for 0 ≤ i < $x + $y do {
    $x := $x - 2;
    $r := $r + 1;
  }
}


action for4(a: Number) returns r: Number {
  $r := $a;
  $x := 100;
  for 0 ≤ i < $x do {
    $r := $r + 1;
  }
}


action loga(a: Number) returns r: Number {
  $r := 0;
  $x := 1;
  while $x < $a do {
    $r := $r + 1;
    $x := $x * 2;
  }
}

action loga2(a: Number) returns r: Number {
  $r := 0;
  $x := $a;
  while $x > 1 do {
    $r := $r + 1;
    $x := $x / 3;
  }
}



action p1b() returns x: Number {
  $x := 10;
  $i := 1;
  while $i < $x do {
    $i := $i*2;
    $x := $x +1;
  }
}



action decrease(a: Number) returns r: Number {
  $i := 10;
  while $i > 0 do {
    $r := 1;
    $i := $i - 1;
  }
}

action decrease2(a: Number) returns r: Number {
  $i := 10;
  while $i > $a do {
    $r := 1;
    $i := $i - 1;
  }
}

action increase(arg1: Number, arg2: Number) {
  $i := $arg1;
  while $i < $arg2 do {
    $i := $i + 1;
  }
}


action square(a: Number) returns r: Number {
  $r := 0;
  for 0 ≤ i < $a do {
    for 0 ≤ j < $a do {
      $r := $r + 1;
    }
  }
}

// produces Widening error (java.lang.IllegalArgumentException: different environments)
action nested_error() returns r: Number {
  $r := 0;
  $a := 5;
  $b := 6;
  for 0 ≤ i < $a do {
    for 0 ≤ j < $b do {
      $r := $r + 1;
    }
  }
}

action nested(a: Number, a2: Number) returns r: Number {
  $r := 0;
  for 0 ≤ i < $a do {
    for 0 ≤ j < $a2 do {
      $r := $r + 1;
    }
  }
}


action nested2(a: Number, b: Number, c: Number, d: Number) returns r: Number {
  $r := 0;
  $i := $a;
  while $i < $b do {
    $j := $c;
    while $j < $d do {
      $r := $r + 1;
      $j := $j + 1;
    }
    $i := $i + 1; 
  }
}


action test(a: Number, b: Number) returns r: Number {
  $r := 0;
  $j :=0;
  if $a < 5 then {
    $j := 2; 
  } else {
    $j := 3;    
  } 
  $i := $a;
  while $i + $j < $b do {
    //$j := 0;
    $i := $i + 1;
    $j := $j + 1; 
  }
}



action nestedTriple(a: Number, b: Number, c: Number) returns r: Number {
  $r := 0;
  for 0 ≤ i < $a do {
    for 0 ≤ j < $b do {
      for 0 ≤ k < $c do {
          $r := $r + 1;
        }
    }
  }
}


action ifTest() returns r: Number {
  $r := 0;
  $w := 7; 
  $x := 8; 
  $y := 9; 
  $z := 11; 
    if 5*$w + $x > 2*$y + $z then {
      $r := 0;
    } else {
      $r := 1;
    }
}

action ifTest1() {
  $a := 0; 
  $b := 0; 
  for 0 ≤ i < 8 do {
    if $i < 4 then {
      $a := $b;
    } else {
      for 0 ≤ k < 77 do {}
    }
  }
}

action ifTest2() {
  for 0 ≤ i < 5 do {
    if $i < 5 then {
    } else {
    }
  }
}


action if(a: Number) returns r: Number {
  for 0 ≤ i < $a do {
    if $i ≥ 2 then {
      $r := $r + 1;
    }
  }
}



action if3() {
  for 0 ≤ i < 5 do {
    if $i < 3 then {
    } else {
      for 0 ≤ j < 6 do {
      }
    }
  }
}

action p1(a: Number) returns r: Number {
  $x := $a;
  $i := 1;
  while $i < $x do {
    $i := $i*2;
    $x := $x +1;
  }
}



action p2(a: Number) returns r: Number {
  $x := $a;
  $y := 1;
  $i := 0;
  while $i < $x-$y do {
    $i := $i + 1;
    $x := $x + 1;
    $y := $y*2;
  }
}

action p3(a: Number) returns r: Number {
  $x := $a;
  $y := 0;
  $z := 0;
  $i := 0;
  while $i < $x + $y + $z do {
    $i := $i +1;
    $oldy := $y;
    $y := $z + 2;
    $z := $oldy - 3;
  }
}	

action p3b(a: Number) returns r: Number {
  $x := $a;
  $y := 0;
  $z := 0;
  $i := 0;
  while $i < $x + $y + $z do {
    $i := $i +1;
    $y := $y + 2;
    $z := $z - 3;
  }
}		
	
	
action d1(a: Number) returns r: Number {
  $x := 5;
  $y := 6;
  $i := 0;
  while $i < $x + $y do {
    $temp := $x;
    $x := $y - 1;
    $y := $temp + 1;
    $i := $i + 1;
  }
}		
	

action factorialN(a: Number) returns r: Number {
  // returns r such that r! >= a and (r-1)! < a
  $f := 1;
  $i := 0;
  while ($f < $a) do {      
    $i := $i + 1; 
    $f := $f * $i;          
  }
  $r := $i;
}
	
action d2(a: Number) returns r: Number {
  $x := 1;
  $i := 1;
  while ($x < $a) do {      
    $i := $i + 1; 
    $x := $x + $i;          
  }
  $r := $i;
}



action d3(a: Number) returns r: Number {
  $x := 0;
  $i := 1;
  $j := 1;
  while ($x < $a) do {   
    $x := $x + $j;    // noch anschauen wg. Reihenfolge
    $i := $i + 1; 
    $j := $j + $i; 
  }
}


action d4(a: Number) returns r: Number {   // noch anschauen 
  $x := 1;
  $i := 0;
  $j := 1;
  $k := 1;
  while ($x < $a) do {      
    $i := $i + 1; 
    $j := $j + $i;
    $k := $k + $j;
    $x := $x + $k;          
  }
}


action not() {    // gives 20/3*c2
  $i := 1;
  $j := 2;
  while (not ($i < 10 and $j < 20)) do {
    $i := $i + 1;
    $j := $j + 3;
  }
}

	
action and1() {    // gives 20/3*c2
  $i := 1;
  $j := 2;
  while $i < 10 and $j < 20 do {
    $i := $i + 1;
    $j := $j + 3;
  }
}

action and2(a: Number, b: Number) {
  $i := 0;
  $j := 1;
  $k := 0;
  $l := 1;
  while ($i < 10 and $j < 42 and $k < 50 and $l < 99) do {
    $i := $i + 1;
    $j := $j + 3;
    $k := $k + 1;
    $l := $l + 99;
  }
}


action or1() {
  $i := 1;
  $j := 2;
  while $i < 10 or $j < 20 do {
    $i := $i + 1;
    $j := $j + 3;
  }
}

action or2() {
  $i := 0;
  while ($i ≥ 0 and $i < 10) or ($i ≥ 10 and $i < 25) do {
    $i := $i + 1;
  }
}

action or3() {
  $i := 1;
  $j := 1;
  $k := 1;
  $l := 1;
  while ($i < 10 or $j < 10) and ($k < 100 or $l < 100) do {
    $i := $i + 1;
    $j := $j + 1;
    $k := $k + 1;
    $l := $l + 1;
  }
}

action or4(a: Number, b: Number) {
  $i := 1;
  $j := 1;
  while (($i > 0 and $i < 10) or ($j > 10 and $j < 25)) do {
    $i := $i + 1;
    $j := $j + 1;
  }
}

action foreachPic() {
  foreach pic in media→pictures do {
    $pic→post_to_wall;
  }
}

action foreachSong() {
  foreach e in media→songs where true do {
   $e→post_to_wall;
  }
}

action nc() {
  $v := collections→create_number_collection;
  $v→add(1);
  $v→add(2);
  $x := 2;
  foreach e in $v where true do {
    $x := $x + 1;
    //$v→add($x);
    $e→post_to_wall;
  }
}



