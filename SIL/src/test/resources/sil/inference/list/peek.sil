var val: Int
var next: Ref

/** Returns the value of the first list element. */
method peek(list: Ref) returns (res: Int) {
    res := list.val
}

method test(list: Ref) requires acc(valid(list), write) {
    var res: Int

    // Unfold so the `peek` method gets permission to the first list element
    unfold acc(valid(list), write)

    res := peek(list)

    //:: UnexpectedOutput(assert.failed:assertion.false, /sample/issue/999/)
    assert(res == list.next)

    fold acc(valid(list), write)
}

predicate valid(this: Ref) {
    acc(this.val, write) &&
    acc(this.next, write) &&
    ((this.next != null) ==> acc(valid(this.next), write))
}