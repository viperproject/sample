var val: Int
var next: Ref

/** Traverses a given linked list without looking at its value. */
method traverse(list: Ref)
{
    var cur: Ref
    cur := list
    while (cur != null) {
        cur := cur.next
    }
}

/** Tests that the inferred precondition of traverse is not too strong. */
method test(list: Ref) requires acc(valid(list), write) {
    traverse(list)
}

/** Predicate that the specification inference should detect and reuse. */
predicate valid(this: Ref) {
  acc(this.next, write) && ((this.next != null) ==> acc(valid(this.next), write))
}