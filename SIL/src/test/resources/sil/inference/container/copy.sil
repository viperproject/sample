var val: Int

/** Creates a new container whose value is the same as the given container. */
method copy(this: Ref) returns (other: Ref) {
    other := new()
    other.val := this.val
}

/** Tests that `copy` returns all permissions. */
method testCopyPerms() {
    var this: Ref
    var other: Ref
    this := new()
    this.val := 42

    other := copy(this)

    // Method should give back permissions to both this and other
    assert(acc(other.val, write))
    assert(acc(this.val, write))

    //:: UnexpectedOutput(assert.failed:assertion.false, /silicon/issue/999/)
    assert(this.val == other.val)
}

method testCopyReturnValue() {
    var this: Ref
    var other: Ref
    this := new()
    this.val := 42

    other := copy(this)

    //:: UnexpectedOutput(assert.failed:assertion.false, /silicon/issue/999/)
    assert(this.val == other.val)
}

method testCopyOldValue() {
    var this: Ref
    var other: Ref
    this := new()
    this.val := 42

    other := copy(this)

    //:: UnexpectedOutput(assert.failed:assertion.false, /silicon/issue/999/)
    assert(this.val == 42)
}

method testCopyNull() {
    var other: Ref

    //:: ExpectedOutput(call.precondition:assertion.false)
    other := copy(null)
}