var left: Ref
var right: Ref
var val: Int

method traverse(tree: Ref, needle: Int)
    returns (node: Ref)
    requires acc(valid(tree), write)
{
    node := tree

    while (node != null && node.val != needle) {
        if (node.val < needle) {
            node := node.right
        } else {
            node := node.left
        }
    }
}

/** Predicate that the specification inference should detect and reuse. */
predicate valid(tree: Ref) {
  acc(tree.val, write) && acc(tree.left, write) && acc(tree.right, write) &&
  ((tree.left != null) ==> acc(valid(tree.left), write)) &&
  ((tree.right != null) ==> acc(valid(tree.right), write))
}