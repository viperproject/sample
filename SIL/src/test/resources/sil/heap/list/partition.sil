var val: Int
var next: Ref

/** Partitions a list into two lists where one of the list contains
  * all list elements whose value is smaller than the given key,
  * while the other list contains all list elements whose value
  * is greater than or equal to the given key.
  */
method partition(this: Ref, key: Int)
    returns (smaller: Ref, greaterOrEqual: Ref)
    requires acc(valid(this), write)
{
    var cur: Ref
    var next: Ref
    smaller := null
    greaterOrEqual := null
    cur := this
    while (cur != null) {
        next := cur.next
        if (cur.val < key) {
            cur.next := smaller
            smaller := cur
        } else {
            cur.next := greaterOrEqual
            greaterOrEqual := cur
        }

        cur := next
        next := null
    }
}

/** Predicate that the specification inference should detect and reuse. */
predicate valid(this: Ref) {
  acc(this.val, write) && acc(this.next, write) &&
  ((this.next != null) ==> acc(valid(this.next), write))
}