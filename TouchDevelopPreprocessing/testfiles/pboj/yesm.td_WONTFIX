meta version "v2.2,nothing";
meta name "equation rescue";
//
meta platform "current";
meta import r4f {
  pub "ulnt"
  usage {
    action ask_program_async(tool: String, program: String, done: Text_Action)
  }
}

action main() {
  code→show;
}

action show() {
  if box→is_init then {
    data→source := "x^2 + y^2 = 1\nx < y";
    data→result := "";
    data→asking := false;
    data→errors := collections→create_string_map;
    wall→set_background(colors→black);
    wall→set_foreground(colors→white);
    wall→set_title("Do you have algebraic equations to solve?");
    wall→set_subtitle("Microsoft Research");
    code→ask_async;
  }
  if true then {
    box→set_width(box→page_width);
    box→set_padding(.5, 0.5, 1, 4);
    box→set_scrolling(false, true);
    do box {
      box→set_font_size(2);
      "enter your equations" →post_to_wall;
    }
    do box {
      box→set_horizontal_alignment(1, 1);
      box→set_font_size(1.2);
      box→set_margins(0.5, 0, 0, 0);
      box→set_padding(0.5, 0.5, 0.5, 0.5);
      box→set_background(colors→white);
      box→set_foreground(colors→black);
      box→set_height(box→page_height / 3);
      box→edit_text(data→source, true);
      box→set_text_wrapping(true, 15);
      box→on_text_editing($handler)
      where handler(text: String) {
        data→source := $text;
      }
    }
    do box {
      box→set_horizontal_alignment(1, 1);
      box→use_horizontal_layout;
      do box {
        box→set_font_size(2);
        box→set_margins(0.5, 0, 1, 0);
        box→set_padding(0.5, 2, 0.5, 2);
        box→set_vertical_alignment(0, 0);
        "solve" →post_to_wall;
        if data→asking then {
          box→set_border(colors→gray, 0.1);
          box→set_foreground(colors→gray);
        }
        else {
          box→set_border(colors→white, 0.1);
          box→on_tapped($handler2)
          where handler2() {
            code→ask_async;
          }
        }
      }
      do box {
        box→set_font_size(0.5);
        box→set_margins(0.5, 0, 1, 0);
        box→set_horizontal_alignment(0, 1);
        box→set_vertical_alignment(1, 0);
        "use simple names for variables (x, y, z,...), one equation per line, ^ for exponent " →post_to_wall;
      }
    }
    if data→asking then {
      do box {
        box→set_font_size(2);
        box→set_foreground(colors→gray);
        "thinking..." →post_to_wall;
      }
    }
    else {
      if data→errors→count > 0 then {
        do box {
          box→set_font_size(2);
          box→set_foreground(colors→gray);
          "issues" →post_to_wall;
        }
        foreach line_number in data→errors→keys where true do {
          do box {
            $msg := data→errors→at($line_number);
            box→set_horizontal_alignment(1, 1);
            box→set_font_size(1.5);
            box→set_text_wrapping(true, 15);
            ("line " ∥ $line_number ∥ ": " ∥ $msg)→post_to_wall;
          }
        }
      }
      else {
        if data→result→is_empty then {
          box→set_horizontal_alignment(1, 1);
          box→set_text_wrapping(true, 15);
          box→set_font_size(1.5);
          box→set_foreground(colors→gray);
          "Oops, looks like we could not find a solution" →post_to_wall;
        }
        else {
          do box {
            box→set_font_size(2);
            box→set_foreground(colors→gray);
            "solutions" →post_to_wall;
          }
          do box {
            box→set_horizontal_alignment(1, 1);
            box→set_text_wrapping(true, 15);
            box→set_font_size(1.5);
            data→result→post_to_wall;
          }
        }
      }
    }
  }
}
var source : String {
}

action ask_async() {
  // build proper python source before sending to z3 py
  data→result := "";
  data→asking := true;
  $src := data→source;
  $src := $src→replace("=", "==")→replace("^", "**");
  time→log("src: " ∥ $src);
  $strings := code→collect_variables($src);
  data→python := "set_html_mode(False)\n";
  data→python := data→python ∥ $strings→join(", ") ∥ "= Reals(\'" ∥ $strings→join(" ") ∥ "\')\n";
  data→python := data→python ∥ "solve(" ∥ $src→split("\n")→join(", ") ∥ ")";
  time→log("python: " ∥ data→python);
  ♻ r4f→ask_program_async("z3py", data→python, $done)
  where done(text: String) {
    data→asking := false;
    data→result := $text;
    code→parse_errors;
    if data→result→contains("error:") then {
      data→result := data→python ∥ "\n\n" ∥ $text;
    }
  }
  meta private;
}
var result : String {
}

action collect_variables(src: String) returns strings: String_Collection {
  $variables := $src→matches("[a-zA-Z][a-zA-Z0-9]*");
  $d := collections→create_string_map;
  foreach e in $variables where $d→at($e)→is_invalid do {
    $d→set_at($e, $e);
  }
  $strings := $d→keys;
  meta private;
}
var python : String {
}
var errors : String_Map {
}

action parse_errors() {
  data→errors := collections→create_string_map;
  $lines := data→result→split("\n");
  foreach @match in $lines where true do {
    $groups := $@match→@match("^c\\.py\\((\\d+)\\): error:(.*)$");
    if $groups→count > 0 then {
      data→errors→set_at($groups→at(1), $groups→at(2));
    }
  }
  meta private;
}
var asking : Boolean {
}

