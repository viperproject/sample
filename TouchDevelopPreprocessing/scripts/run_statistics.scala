import ch.ethz.inf.pm.td.compiler.TouchException
import ch.ethz.inf.pm.td.parser._
import ch.ethz.inf.pm.td.stdlib._
import ch.ethz.inf.pm.td.webapi.{Scripts, NoMoreScriptsException, NewScripts, URLFetcher}
import ch.ethz.inf.pm.td.typecheck._
import tools.cmd.Parser.ParseException

val coveredMembers = List(
  "bazaar.leaderboard_score",
  "bazaar.post_leaderboard_score",
  "bazaar.post_leaderboard_to_wall",
  "Board.create_boundary",
  "Board.create_ellipse",
  "Board.create_obstacle",
  "Board.create_picture",
  "Board.create_rectangle",
  "Board.create_sprite_set",
  "Board.create_text",
  "Board.evolve",
  "Board.height",
  "Board.post_to_wall",
  "Board.set_background",
  "Board.set_background_camera",
  "Board.set_background_picture",
  "Board.set_debug_mode",
  "Board.set_gravity",
  "Board.touch_current",
  "Board.touch_start",
  "Board.touched",
  "Board.update_on_wall",
  "Board.width",
  "Boolean.and",
  "Boolean.equals",
  "Boolean.not",
  "Boolean.or",
  "collections.create_number_map",
  "collections.create_string_collection",
  "Color.darken",
  "Color.equals",
  "Color.lighten",
  "Color.make_transparent",
  "colors.accent",
  "colors.background",
  "colors.black",
  "colors.blue",
  "colors.brown",
  "colors.chrome",
  "colors.cyan",
  "colors.dark_gray",
  "colors.foreground",
  "colors.from_argb",
  "colors.from_hsb",
  "colors.from_rgb",
  "colors.gray",
  "colors.green",
  "colors.light_gray",
  "colors.magenta",
  "colors.orange",
  "colors.purple",
  "colors.rand",
  "colors.random",
  "colors.red",
  "colors.subtle",
  "colors.transparent",
  "colors.white",
  "colors.yellow",
  "DateTime.add_days",
  "DateTime.day",
  "DateTime.greater",
  "DateTime.hour",
  "DateTime.minute",
  "DateTime.month",
  "DateTime.second",
  "DateTime.subtract",
  "DateTime.to_string",
  "DateTime.week_day",
  "DateTime.year",
  "Json_Object.count",
  "Json_Object.field",
  "Json_Object.string",
  "languages.speak",
  "languages.speech_to_text",
  "languages.translate",
  "Link.address",
  "Link.post_to_wall",
  "Location.is_invalid",
  "Location.latitude",
  "Location.longitude",
  "locations.describe_location",
  "Map.post_to_wall",
  "maps.create_map",
  "math.abs",
  "math.atan2",
  "math.cos",
  "math.create_number_map",
  "math.create_vector3",
  "math.deg_to_rad",
  "math.floor",
  "math.max",
  "math.min",
  "math.mod",
  "math.pow",
  "math.rad_to_deg",
  "math.rand",
  "math.random",
  "math.round",
  "math.round_with_precision",
  "math.sin",
  "math.sqrt",
  "math.π",
  "media.choose_picture",
  "media.create_board",
  "media.create_full_board",
  "media.create_picture",
  "media.icon",
  "media.large_icon",
  "media.pictures",
  "media.song_albums",
  "media.songs",
  "Message_Collection.post_to_wall",
  "Number.*",
  "Number.+",
  "Number.-",
  "Number./",
  "Number.<",
  "Number.=",
  "Number.>",
  "Number.is_invalid",
  "Number.post_to_wall",
  "Number.to_character",
  "Number.to_string",
  "Number.∥",
  "Number.≠",
  "Number.≤",
  "Number.≥",
  "Number_Map.at",
  "Number_Map.count",
  "Number_Map.post_to_wall",
  "Number_Map.set_at",
  "Page_Button.icon",
  "Page_Button.text",
  "phone.choose_phone_number",
  "phone.dial_phone_number",
  "phone.vibrate",
  "Picture.blend",
  "Picture.clear",
  "Picture.clone",
  "Picture.colorize",
  "Picture.crop",
  "Picture.desaturate",
  "Picture.draw_ellipse",
  "Picture.draw_line",
  "Picture.draw_rect",
  "Picture.draw_text",
  "Picture.fill_ellipse",
  "Picture.fill_rect",
  "Picture.height",
  "Picture.is_invalid",
  "Picture.is_panorama",
  "Picture.pixel",
  "Picture.post_to_wall",
  "Picture.resize",
  "Picture.save_to_library",
  "Picture.tint",
  "Picture.update_on_wall",
  "Picture.width",
  "Pictures.at",
  "Pictures.random",
  "player.active_song",
  "player.is_paused",
  "player.is_playing",
  "player.next",
  "player.pause",
  "player.play",
  "player.previous",
  "player.resume",
  "player.stop",
  "senses.acceleration_quick",
  "senses.camera",
  "senses.current_location",
  "senses.record_microphone",
  "senses.take_camera_picture",
  "social.send_sms",
  "Song.album",
  "Song.artist",
  "Song.name",
  "Song.play",
  "Song.post_to_wall",
  "Song_Album.art",
  "Songs.at",
  "Songs.count",
  "Songs.rand",
  "Songs.random",
  "Sound.play",
  "Sound.post_to_wall",
  "Sprite.angle",
  "Sprite.color",
  "Sprite.height",
  "Sprite.hide",
  "Sprite.is_visible",
  "Sprite.move",
  "Sprite.overlap_with",
  "Sprite.overlaps_with",
  "Sprite.set_angle",
  "Sprite.set_angular_speed",
  "Sprite.set_color",
  "Sprite.set_elasticity",
  "Sprite.set_friction",
  "Sprite.set_height",
  "Sprite.set_opacity",
  "Sprite.set_picture",
  "Sprite.set_pos",
  "Sprite.set_speed",
  "Sprite.set_speed_x",
  "Sprite.set_speed_y",
  "Sprite.set_text",
  "Sprite.set_width",
  "Sprite.set_x",
  "Sprite.set_y",
  "Sprite.show",
  "Sprite.speed_x",
  "Sprite.speed_y",
  "Sprite.text",
  "Sprite.width",
  "Sprite.x",
  "Sprite.y",
  "Sprite_Set.add",
  "Sprite_Set.at",
  "Sprite_Set.count",
  "Sprite_Set.index_of",
  "String.at",
  "String.concat",
  "String.contains",
  "String.copy_to_clipboard",
  "String.count",
  "String.equals",
  "String.index_of",
  "String.is_empty",
  "String.is_invalid",
  "String.matches",
  "String.post_to_wall",
  "String.replace",
  "String.replace_regex",
  "String.share",
  "String.split",
  "String.starts_with",
  "String.substring",
  "String.to_lower_case",
  "String.to_number",
  "String.to_upper_case",
  "String.∥",
  "String_Collection.add",
  "String_Collection.add_many",
  "String_Collection.at",
  "String_Collection.clear",
  "String_Collection.contains",
  "String_Collection.count",
  "String_Collection.join",
  "String_Collection.remove_at",
  "TextBox.post_to_wall",
  "TextBox.set_background",
  "TextBox.set_foreground",
  "TextBox.set_text",
  "TextBox.text",
  "Tile.set_back_icon",
  "Tile.set_back_title",
  "Tile.set_background",
  "Tile.set_content",
  "Tile.set_counter",
  "Tile.set_icon",
  "time.fail_if_not",
  "time.now",
  "time.sleep",
  "time.stop",
  "time.stop_and_close",
  "time.today",
  "Vector3.scale",
  "Vector3.x",
  "Vector3.y",
  "Vector3.z",
  "wall.add_button",
  "wall.ask_boolean",
  "wall.ask_number",
  "wall.ask_string",
  "wall.clear",
  "wall.create_text_box",
  "wall.pick_string",
  "wall.pop_page",
  "wall.prompt",
  "wall.push_new_page",
  "wall.screenshot",
  "wall.set_background",
  "wall.set_background_picture",
  "wall.set_reversed",
  "wall.set_subtitle",
  "wall.set_title",
  "web.browse",
  "web.connection_name",
  "web.connection_type",
  "web.download",
  "web.download_json",
  "web.download_picture",
  "web.is_connected",
  "web.json",
  "web.link_url",
  "web.open_connection_settings",
  "web.url_encode",
  "web.xml"
)
val coveredTypes = List(
  "Board",
  "Boolean",
  "Color",
  "DateTime",
  "Link",
  "Location",
  "Nothing",
  "Number",
  "Number_Map",
  "Picture",
  "Song",
  "Songs",
  "Sound",
  "Sprite",
  "Sprite_Set",
  "String",
  "String_Collection",
  "TextBox",
  "Tile",
  "Vector3"
)
val coveredFeatures = List(
  "Libaries",
  "User-Defined-Types"
)

val uses = new UsesCounter
val coverage = new CoverageCounter
for (cT <- coveredTypes) {
  coverage.addType(cT)
}
for (cM <- coveredMembers) {
  coverage.addMember(cM)
}
for (cF <- coveredFeatures) {
  coverage.addFeature(cF)
}

var totalnumberOfScripts = 0
var numberOfWeFailed = 0
var numberOfHasErrors = 0

val scr = new Scripts
try {
  while (true) {
    val script = scr.get()
    totalnumberOfScripts = totalnumberOfScripts + 1
    val url = script.getCodeURL
    try {
      if (!script.haserrors) {
        val ast = ScriptParser(URLFetcher.fetchFile(url))
        val symbolTable = new SymbolTable(ast) with FieldStatistics with StdLib with DebugLib

        coverage.setScript(script.id)
        uses.setScript(script.id)
        symbolTable.addCounter(uses)
        symbolTable.addCounter(coverage)

        Typer.processScript(ast,symbolTable)
      } else {
        numberOfHasErrors = numberOfHasErrors + 1
      }
    } catch {
      case e:TouchException =>
        println(url)
        numberOfWeFailed = numberOfWeFailed + 1
        println(e.msg + " (Position: " + e.pos + ")")
        coverage.uncover()
    }
  }
} catch {
  case e:NoMoreScriptsException => Unit
}
println("done.")
println("totalnumberOfScripts="+ totalnumberOfScripts)
println("numberOfWeFailed="+ numberOfWeFailed)
println("numberOfHasErrors="+ numberOfHasErrors)
println(uses)
println(coverage)
