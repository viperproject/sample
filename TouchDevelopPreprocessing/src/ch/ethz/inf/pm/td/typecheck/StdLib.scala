package ch.ethz.inf.pm.td.typecheck

/**
 *
 * AUTOGENERATED BY generate_type_information.scala
 *
 * Lucas Brutschy
 *
 */

trait StdLib extends AbstractSymbolTable  {

    
  // Represents no value of interest
  addType("Nothing", List( 

  ))

  // A place to hook up an action to execute in response to an event
  addType("Action", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("run","Nothing") /* Run the inline action. */
  ))

  // A place to hook up an action to execute in response to an event
  addType("Text Action", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("run",List("String"),"Nothing") /* Run the inline action. */
  ))

  // A place to hook up an action to execute in response to an event
  addType("Number Action", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("run",List("Number"),"Nothing") /* Run the inline action. */
  ))

  // A place to hook up an action to execute in response to an event
  addType("Boolean Action", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("run",List("Boolean"),"Nothing") /* Run the inline action. */
  ))

  // A place to hook up an action to execute in response to an event
  addType("Position Action", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("run",List("Number","Number"),"Nothing") /* Run the inline action. */
  ))

  // A place to hook up an action to execute in response to an event
  addType("Sprite Action", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("run",List("Sprite"),"Nothing") /* Run the inline action. */
  ))

  // A place to hook up an action to execute in response to an event
  addType("Sprite Set Action", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("run",List("Sprite Set"),"Nothing") /* Run the inline action. */
  ))

  // A place to hook up an action to execute in response to an event
  addType("Vector Action", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("run",List("Number","Number","Number","Number"),"Nothing") /* Run the inline action. */
  ))

  // A place to hook up an action to execute in response to an event
  addType("Web Response Action", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("run",List("Web Response"),"Nothing") /* Run the inline action. */
  ))

  // A place to hook up an action to execute in response to an event
  addType("Message Collection Action", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("run",List("Message Collection"),"Nothing") /* Run the inline action. */
  ))

  // An calendar appointment
  addType("Appointment", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("is private","Boolean") /* Indicates if this appointment is private */,
    Member("is all day event","Boolean") /* Indicates if this is an all day event */,
    Member("status","String") /* Gets your status (free, tentative, busy, outofoffice) */,
    Member("organizer","Contact") /* Gets the organizer */,
    Member("end time","DateTime") /* Gets the end time */,
    Member("start time","DateTime") /* Gets the location */,
    Member("location","String") /* Gets the location */,
    Member("subject","String") /* Gets the subject */,
    Member("details","String") /* Gets the details */,
    Member("source","String") /* Gets the source of this appointment (facebook, etc...) */,
    Member("attendees","Contact Collection") /* Gets the list of attendees. Each contact contains a name and email address. */,
    Member("post to wall","Nothing") /* Posts the appointment to the wall */
  ))

  // A collection of appointments
  addType("Appointment Collection", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("count","Number") /* Gets the number of appointments */,
    Member("at index",List("Number"),"Appointment") /* ONLY INSIDE SAMPLE: an accessor which is always number based */,
    Member("copy","Appointment Collection") /* ONLY INSIDE SAMPLE: cloning a collection*/,
    Member("at",List("Number"),"Appointment") /* Gets the appointment at index */,
    Member("post to wall","Nothing") /* Posts the appointments on the wall */
  ))

  // Browse and review scripts from the bazaar
  addSingleton("Bazaar", List( 
    Member("user of",List("String"),"User") /* Returns a user object for a specified user id */,
    Member("current user","User") /* Returns the user object of the current user */,
    Member("leaderboard score","Number") /* Gets the current score for the current script */,
    Member("post leaderboard score",List("Number"),"Nothing") /* Posts the current game score to the script leaderboard */,
    Member("post leaderboard to wall","Nothing") /* Posts the current game leaderboard to the wall */,
    Member("open","Nothing") /* [**obsolete**] Launches the bazaar. */,
    Member("open review","Nothing") /* [**obsolete**] Opens the review page for the current script */,
    Member("open leaderboard","Nothing") /* [**obsolete**] Opens the leaderboard for the current script */,
    Member("script id",List("String"),"String") /* Returns an identifier of either the top-level script or the current library */,
    Member("pick script",List("String","String"),"String") /* Asks the user to pick a script and return its identifier */,
    Member("save ast",List("String","Json Object"),"Nothing") /* Saves given Abstract Syntax Tree as a script */,
    Member("ast of",List("String"),"Json Object") /* Returns the Abstract Syntax Tree JSON object for specified script */
  ))

  // Arithmetic and bitwise operations on 32 bit integers
  addSingleton("Bits", List( 
    Member("add uint32",List("Number","Number"),"Number") /* Add two unsigned 32 bit numbers */,
    Member("subtract uint32",List("Number","Number"),"Number") /* Subtract two unsigned 32 bit numbers */,
    Member("multiply uint32",List("Number","Number"),"Number") /* Multiply two unsigned 32 bit numbers */,
    Member("add int32",List("Number","Number"),"Number") /* Add two signed 32 bit numbers */,
    Member("subtract int32",List("Number","Number"),"Number") /* Subtract two signed 32 bit numbers */,
    Member("multiply int32",List("Number","Number"),"Number") /* Multiply two signed 32 bit numbers */,
    Member("and uint32",List("Number","Number"),"Number") /* Perform bitwise and (`&` in C) */,
    Member("or uint32",List("Number","Number"),"Number") /* Perform bitwise or (`|` in C) */,
    Member("xor uint32",List("Number","Number"),"Number") /* Perform bitwise exclusive or (`^` in C) */,
    Member("not uint32",List("Number"),"Number") /* Perform bitwise negation (`~` in C) */,
    Member("shift left uint32",List("Number","Number"),"Number") /* Shift `x` by `bits` left (`<<` in C) */,
    Member("shift right uint32",List("Number","Number"),"Number") /* Shift `x` by `bits` right (`>>` in C, `>>>` in JavaScript) */,
    Member("rotate left uint32",List("Number","Number"),"Number") /* Rotate `x` by `bits` left (rotl) */,
    Member("rotate right uint32",List("Number","Number"),"Number") /* Rotate `x` by `bits` right (rotr) */,
    Member("create buffer",List("Number"),"Buffer") /* Creates an empty binary buffer of `size` bytes */,
    Member("string to buffer",List("String","String"),"Buffer") /* Decodes string into a binary buffer */
  ))

  // A device connected via Bluetooth
  addType("Bluetooth Device", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("name","String") /* Get the user-friendly name of the device */,
    Member("address","String") /* Get the internal address of the device */,
    Member("connected","Boolean") /* Check if we're currently connected to device */,
    Member("connect","Nothing") /* Try to connect to the device; use `->connected` to check if it succeeded. */,
    Member("disconnect","Nothing") /* Close connection to the device. */,
    Member("read buffer at most",List("Number"),"Buffer") /* Read at most `max_length` bytes from the device */,
    Member("read buffer",List("Number"),"Buffer") /* Read exactly `length` bytes from the device */,
    Member("write buffer",List("Buffer"),"Nothing") /* Send the `buffer` to the device */,
    Member("post to wall","Nothing") /* Display the name of the device */
  ))

  // A board to build 2D games
  addType("Board", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("height","Number") /* Gets the height in pixels */,
    Member("count","Number") /* Gets the sprite count */,
    Member("width","Number") /* Gets the width in pixels */,
    Member("touched","Boolean") /* True if board is touched */,
    Member("touch start","Vector3") /* Last touch start point */,
    Member("touch current","Vector3") /* Current touch point */,
    Member("touch end","Vector3") /* Last touch end point */,
    Member("touch velocity","Vector3") /* Final touch velocity after touch ended */,
    Member("create boundary",List("Number"),"Nothing") /* Create walls around the board at the given distance. */,
    Member("create sprite set","Sprite Set") /* Create a new collection for sprites. */,
    Member("frame timer","Timer") /* create a timer that fires for every display frame. */,
    Member("add on every frame",List("Action"),"Nothing") /* add an action that fires for every display frame. */,
    Member("on tap",List("Position Action"),"Nothing") /* set the handler that is invoked when the board is tapped */,
    Member("on swipe",List("Vector Action"),"Nothing") /* set the handler that is invoked when the board is swiped */,
    Member("on touch down",List("Position Action"),"Nothing") /* set the handler that is invoked when the board is touched */,
    Member("on touch up",List("Position Action"),"Nothing") /* set the handler that is invoked when the board touch is released */,
    Member("evolve","Nothing") /* Update positions of sprites on board. */,
    Member("set background",List("Color"),"Nothing") /* Sets the background color */,
    Member("set background camera",List("Camera"),"Nothing") /* Sets the background camera */,
    Member("set background picture",List("Picture"),"Nothing") /* Sets the background picture */,
    Member("set debug mode",List("Boolean"),"Nothing") /* In debug mode, board displays speed and other info of sprites */,
    Member("set friction",List("Number"),"Nothing") /* Sets the default friction for sprites to a fraction of speed loss between 0 and 1 */,
    Member("is landscape","Boolean") /* Gets a value indicating if the board is designed to be viewed in landscape mode */,
    Member("set gravity",List("Number","Number"),"Nothing") /* Sets the uniform acceleration vector for objects on the board to pixels/sec^2 */,
    Member("at index",List("Number"),"Sprite") /* ONLY INSIDE SAMPLE: an accessor which is always number based */,
    Member("copy","Board") /* ONLY INSIDE SAMPLE: cloning a collection*/,
    Member("at",List("Number"),"Sprite") /* Gets the sprite indexed by i */,
    Member("update on wall","Nothing") /* Make updates visible. */,
    Member("create ellipse",List("Number","Number"),"Sprite") /* Create a new ellipse sprite. */,
    Member("create rectangle",List("Number","Number"),"Sprite") /* Create a new rectangle sprite. */,
    Member("create text",List("Number","Number","Number","String"),"Sprite") /* Create a new text sprite. */,
    Member("create picture",List("Picture"),"Sprite") /* Create a new picture sprite. */,
    Member("create anchor",List("Number","Number"),"Sprite") /* Create an anchor sprite. */,
    Member("create obstacle",List("Number","Number","Number","Number","Number"),"Nothing") /* Create a line obstacle with given start point, and given extent. Elasticity is 0 for sticky, 1 for complete bounce. */,
    Member("create spring",List("Sprite","Sprite","Number"),"Nothing") /* Create a spring between the two sprites. */,
    Member("clear events","Nothing") /* Clear all queued events related to this board */,
    Member("clear background camera","Nothing") /* Clears the background camera */,
    Member("clear background picture","Nothing") /* Clear the background picture */,
    Member("set joystick profile",List("String"),"Nothing") /* [**dbg**] joystick (default), wheel, balance, drag or swipe. */,
    Member("joystick","Vector3") /* [**dbg**] Read the current position of virtual joystick */,
    Member("post to wall","Nothing") /* Shows the board on the wall. */
  ))

  // true or false
  addType("Boolean", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("equals",List("Boolean"),"Boolean") /* Indicates that the two values are equal */,
    Member("not","Boolean") /* Negates the boolean expression */,
    Member("and",List("Boolean"),"Boolean") /* Builds conjunction */,
    Member("or",List("Boolean"),"Boolean") /* Builds disjunction */,
    Member("to string","String") /* Converts a boolean to a string */,
    Member("to number","Number") /* Converts true to 1 and false to 0 */,
    Member("post to wall","Nothing") /* Displays the value on the wall */,
    Member("to json","Json Object") /* Converts the value into a json data structure. */
  ))

  // Current box element in the page.
  addSingleton("Box", List( 
    Member("set foreground",List("Color"),"Nothing") /* Sets the foreground color of elements. */,
    Member("set background",List("Color"),"Nothing") /* Sets the background color. */,
    Member("use vertical layout","Nothing") /* Arrange boxes inside this box from top to bottom. */,
    Member("use horizontal layout","Nothing") /* Arrange boxes inside this box from left to right. */,
    Member("use overlay layout","Nothing") /* Arrange boxes inside this box as layers on top of each other. */,
    Member("set width",List("Number"),"Nothing") /* Set the width of this box. */,
    Member("set height",List("Number"),"Nothing") /* Set the height of this box. */,
    Member("set width range",List("Number","Number"),"Nothing") /* Set lower and upper limits on the width of this box. */,
    Member("set height range",List("Number","Number"),"Nothing") /* Set lower and upper limits on the height of this box. */,
    Member("set horizontal stretch",List("Number"),"Nothing") /* Specify how to compute box width (0 = shrink to fit content, 1 = stretch to fit frame, , 0.5 = stretch to half width) */,
    Member("set vertical stretch",List("Number"),"Nothing") /* Specify how to compute box height (0 = shrink to fit content, 1 = stretch to fit frame, 0.5 = stretch to half height) */,
    Member("set border",List("Color","Number"),"Nothing") /* Set the color and width of the border. */,
    Member("set border widths",List("Number","Number","Number","Number"),"Nothing") /* Set the width of each border. */,
    Member("set margins",List("Number","Number","Number","Number"),"Nothing") /* Set the margins of this box (to leave space around the outside of this box). */,
    Member("set padding",List("Number","Number","Number","Number"),"Nothing") /* Set the padding of this box (to leave space around the contents of this box). */,
    Member("set horizontal alignment",List("Number","Number"),"Nothing") /* [**obsolete**] align (0,0)=center (1,0)=left, (0,1)=right, (1,1)=stretch */,
    Member("set vertical alignment",List("Number","Number"),"Nothing") /* [**obsolete**] align (0,0)=center (1,0)=top, (0,1)=bottom, (1,1)=stretch */,
    Member("set horizontal align",List("String"),"Nothing") /* Specify how to arrange the content of this box */,
    Member("set vertical align",List("String"),"Nothing") /* Specify how to arrange the content of this box */,
    Member("set font size",List("Number"),"Nothing") /* Set font size in this box and contained boxes. */,
    Member("set font weight",List("String"),"Nothing") /* Set font weight in this box and contained boxes. */,
    Member("set scrolling",List("Boolean","Boolean"),"Nothing") /* Specify whether to use scrollbars on overflow. */,
    Member("on tapped",List("Action"),"Nothing") /* Set what happens when the box is tapped. */,
    Member("on text editing",List("Text Action"),"Nothing") /* [**obsolete**] Set what happens whenever the text in the box is being edited. */,
    Member("on text edited",List("Text Action"),"Nothing") /* [**obsolete**] Set what happens when the user has finished editing the text in the box. */,
    Member("edit text",List("String","Boolean"),"Nothing") /* [**obsolete**] Display editable text. */,
    Member("edit",List("String","String","Text Action"),"Nothing") /* Display editable text, with the given binding. */,
    Member("is init","Boolean") /*  */,
    Member("page width","Number") /* Get the total width of the page. */,
    Member("page height","Number") /* Get the total height of the page. */,
    Member("pixels per em","Number") /* Get the number of pixels in an em */,
    Member("set text wrapping",List("Boolean","Number"),"Nothing") /* Set whether to break long lines, and specify what length is too short for breaking */
  ))

  // Contains binary data
  addType("Buffer", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("set",List("Number","Number"),"Nothing") /* Set byte at `index` to `value` */,
    Member("at index",List("Number"),"Number") /* ONLY INSIDE SAMPLE: an accessor which is always number based */,
    Member("copy","Buffer") /* ONLY INSIDE SAMPLE: cloning a collection*/,
    Member("at",List("Number"),"Number") /* Get byte at `index` */,
    Member("count","Number") /* Return the number of bytes in the buffer */,
    Member("sub buffer",List("Number","Number"),"Buffer") /* Creates a read-write view of the current buffer. */,
    Member("fill random","Nothing") /* Fills the buffer with random values */,
    Member("fill",List("Number"),"Nothing") /* Sets all bytes in buffer to `value` */,
    Member("copy from",List("Number","Buffer"),"Nothing") /* Copies all bytes from `source` to current buffer at `offset` */,
    Member("clone","Nothing") /* Copies all bytes from `source` to current buffer at `offset` */,
    Member("to string",List("String"),"String") /* Convert the buffer to a string */
  ))

  // The front or back camera
  addType("Camera", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("height","Number") /* [**not implemented**] Gets the height of the camera image in pixels. */,
    Member("is front","Boolean") /* Indicates if this camera is in front of the phone; false if this is the primary (back) camera. */,
    Member("width","Number") /* [**not implemented**] Gets the width of the camera image in pixels. */,
    Member("post to wall","Nothing") /* Displays the camera video stream in full screen. */,
    Member("preview","Picture") /* Takes a low quality picture from the camera. */
  ))

  // A cloud data session
  addType("Cloud Session", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("equals",List("Cloud Session"),"Boolean") /* Checks if this cloud session is the same as another one */,
    Member("id","String") /* Gets a string that uniquely identifies this cloud session; other users can connect by using this string. */,
    Member("title","String") /* Gets a string that describes this cloud session */,
    Member("owner","User") /* Gets information about the user that owns this session */,
    Member("post to wall","Nothing") /* Displays the session description on the wall. */,
    Member("server info","Json Object") /* [**dbg**] Query server about current state of this session. You must be the authenticated owner. */
  ))

  // Cloud session management
  addSingleton("Cloud Data", List( 
    Member("current session","Cloud Session") /* Gets the currently active session. When the script starts, this is always the just-me session. */,
    Member("rebuild cache","Nothing") /* [**dbg**] Clear the local cache of the current session (which discards unsynced changes) and get fresh data from server */,
    Member("clear all data","Nothing") /* Clear all data of the currently active session. */,
    Member("last session","Cloud Session") /* Gets the last session that the user connected to. */,
    Member("just me session","Cloud Session") /* Gets the just-me session, in which cloud data is shared between devices by the same user. */,
    Member("everyone session","Cloud Session") /* Gets the everyone-session, in which cloud data is shared by everyone running this script. */,
    Member("wait for updates",List("Number"),"Boolean") /* Waits until the current server state has been received. Returns false if offline, or if time limit is exceeded. */,
    Member("create session",List("String","String"),"Cloud Session") /* Creates a new cloud session owned by the current user. */,
    Member("session of",List("String","String"),"Cloud Session") /* Gets a session from a session id */,
    Member("connection status",List("Boolean"),"String") /* Gets a string that describes the state of the cloud synchronization, and additional details if requested */,
    Member("participant number","Number") /* Returns the participant number within the current session, or -1 if not known yet. Participant numbers are assigned by the server on first connect, starting with 0. */,
    Member("set sync enabled",List("Boolean"),"Nothing") /* Enable or disable cloud synchronization for the current session */,
    Member("is sync enabled","Boolean") /* Returns a boolean indicating whether cloud synchronization is enabled for the current session */,
    Member("switch to session",List("Cloud Session"),"Nothing") /* Connect to the given session. The user may be asked to confirm. */,
    Member("switch sessions","Nothing") /* Asks the user to choose a session to switch to */
  ))

  // A collection of objects
  addType("Collection", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("count","Number") /* Gets the number of objects. */,
    Member("clear","Nothing") /* Removes all objects from the collection */,
    Member("add",List("T"),"Nothing") /* Adds an object */,
    Member("add many",List("T Collection"),"Nothing") /* Adds many objects at once */,
    Member("index of",List("T","Number"),"Number") /* Gets the index of the first occurrence of an object. Returns -1 if not found or start is out of range. */,
    Member("at index",List("Number"),"T") /* ONLY INSIDE SAMPLE: an accessor which is always number based */,
    Member("copy","Collection") /* ONLY INSIDE SAMPLE: cloning a collection*/,
    Member("at",List("Number"),"T") /* Gets the object at position index. Returns invalid if index is out of range */,
    Member("contains",List("T"),"Boolean") /* Checks if the item is in the collection */,
    Member("remove",List("T"),"Boolean") /* Removes the first occurence of an object. Returns true if removed. */,
    Member("remove at",List("Number"),"Nothing") /* Removes the object at position index. */,
    Member("reverse","Nothing") /* Reverses the order of objects in the collection */,
    Member("random","T") /* Gets a random object from the collection. Returns invalid if the collection is empty. */,
    Member("set at",List("Number","T"),"Nothing") /* Sets the object at position index. Does nothing if the index is out of range. */,
    Member("insert at",List("Number","T"),"Nothing") /* Inserts an object at position index. Does nothing if index is out of range. */,
    Member("post to wall","Nothing") /* Display all objects on the wall */
  ))

  // A collection of objects
  addType("Sound Collection", List(
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("count","Number") /* Gets the number of objects. */,
    Member("clear","Nothing") /* Removes all objects from the collection */,
    Member("add",List("Sound"),"Nothing") /* Adds an object */,
    Member("add many",List("Sound Collection"),"Nothing") /* Adds many objects at once */,
    Member("index of",List("Sound","Number"),"Number") /* Gets the index of the first occurrence of an object. Returns -1 if not found or start is out of range. */,
    Member("at index",List("Number"),"Sound") /* ONLY INSIDE SAMPLE: an accessor which is always number based */,
    Member("copy","Sound Collection") /* ONLY INSIDE SAMPLE: cloning a collection*/,
    Member("at",List("Number"),"Sound") /* Gets the object at position index. Returns invalid if index is out of range */,
    Member("contains",List("Sound"),"Boolean") /* Checks if the item is in the collection */,
    Member("remove",List("Sound"),"Boolean") /* Removes the first occurence of an object. Returns true if removed. */,
    Member("remove at",List("Number"),"Nothing") /* Removes the object at position index. */,
    Member("reverse","Nothing") /* Reverses the order of objects in the collection */,
    Member("random","Sound") /* Gets a random object from the collection. Returns invalid if the collection is empty. */,
    Member("set at",List("Number","Sound"),"Nothing") /* Sets the object at position index. Does nothing if the index is out of range. */,
    Member("insert at",List("Number","Sound"),"Nothing") /* Inserts an object at position index. Does nothing if index is out of range. */,
    Member("post to wall","Nothing") /* Display all objects on the wall */
  ))

  // A collection of objects
  addType("Bluetooth Device Collection", List(
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("count","Number") /* Gets the number of objects. */,
    Member("clear","Nothing") /* Removes all objects from the collection */,
    Member("add",List("Bluetooth Device"),"Nothing") /* Adds an object */,
    Member("add many",List("Bluetooth Device Collection"),"Nothing") /* Adds many objects at once */,
    Member("index of",List("Bluetooth Device","Number"),"Number") /* Gets the index of the first occurrence of an object. Returns -1 if not found or start is out of range. */,
    Member("at index",List("Number"),"Bluetooth Device") /* ONLY INSIDE SAMPLE: an accessor which is always number based */,
    Member("copy","Bluetooth Device Collection") /* ONLY INSIDE SAMPLE: cloning a collection*/,
    Member("at",List("Number"),"Bluetooth Device") /* Gets the object at position index. Returns invalid if index is out of range */,
    Member("contains",List("Bluetooth Device"),"Boolean") /* Checks if the item is in the collection */,
    Member("remove",List("Bluetooth Device"),"Boolean") /* Removes the first occurence of an object. Returns true if removed. */,
    Member("remove at",List("Number"),"Nothing") /* Removes the object at position index. */,
    Member("reverse","Nothing") /* Reverses the order of objects in the collection */,
    Member("random","Bluetooth Device") /* Gets a random object from the collection. Returns invalid if the collection is empty. */,
    Member("set at",List("Number","Bluetooth Device"),"Nothing") /* Sets the object at position index. Does nothing if the index is out of range. */,
    Member("insert at",List("Number","Bluetooth Device"),"Nothing") /* Inserts an object at position index. Does nothing if index is out of range. */,
    Member("post to wall","Nothing") /* Display all objects on the wall */
  ))

  // A collection of objects
  addType("Picture Collection", List(
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("count","Number") /* Gets the number of objects. */,
    Member("clear","Nothing") /* Removes all objects from the collection */,
    Member("add",List("Picture"),"Nothing") /* Adds an object */,
    Member("add many",List("Picture Collection"),"Nothing") /* Adds many objects at once */,
    Member("index of",List("Picture","Number"),"Number") /* Gets the index of the first occurrence of an object. Returns -1 if not found or start is out of range. */,
    Member("at index",List("Number"),"Picture") /* ONLY INSIDE SAMPLE: an accessor which is always number based */,
    Member("copy","Picture Collection") /* ONLY INSIDE SAMPLE: cloning a collection*/,
    Member("at",List("Number"),"Picture") /* Gets the object at position index. Returns invalid if index is out of range */,
    Member("contains",List("Picture"),"Boolean") /* Checks if the item is in the collection */,
    Member("remove",List("Picture"),"Boolean") /* Removes the first occurence of an object. Returns true if removed. */,
    Member("remove at",List("Number"),"Nothing") /* Removes the object at position index. */,
    Member("reverse","Nothing") /* Reverses the order of objects in the collection */,
    Member("random","Picture") /* Gets a random object from the collection. Returns invalid if the collection is empty. */,
    Member("set at",List("Number","Picture"),"Nothing") /* Sets the object at position index. Does nothing if the index is out of range. */,
    Member("insert at",List("Number","Picture"),"Nothing") /* Inserts an object at position index. Does nothing if index is out of range. */,
    Member("post to wall","Nothing") /* Display all objects on the wall */
  ))

  // Create collections of items.
  addSingleton("Collections", List( 
    Member("create picture collection","Picture Collection") /* Creates an empty Picture collection */,
    Member("create sound collection","Sound Collection") /* Creates an empty Picture collection */,
    Member("create string collection","String Collection") /* Creates an empty string collection */,
    Member("create place collection","Place Collection") /* Creates an empty place collection */,
    Member("create link collection","Link Collection") /* Creates an empty link collection */,
    Member("create message collection","Message Collection") /* Creates an empty message collection */,
    Member("create location collection","Location Collection") /* Creates an empty location collection */,
    Member("create number map","Number Map") /* Creates an empty number map */,
    Member("create string map","String Map") /* Creates an empty string map (case and culture sensitive) */,
    Member("create number collection","Number Collection") /* Creates an empty number collection */
  ))

  // A argb color (alpha, red, green, blue)
  addType("Color", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("A","Number") /* Gets the alpha value (0.0-1.0) */,
    Member("R","Number") /* Gets the red value (0.0-1.0) */,
    Member("G","Number") /* Gets the green value (0.0-1.0) */,
    Member("B","Number") /* Gets the blue value (0.0-1.0) */,
    Member("equals",List("Color"),"Boolean") /* Checks if the color is equal to the other */,
    Member("blend",List("Color"),"Color") /* Composes a new color using alpha blending */,
    Member("make transparent",List("Number"),"Color") /* Creates a new color by changing the alpha channel from 0 (transparent) to 1 (opaque). */,
    Member("darken",List("Number"),"Color") /* Makes a darker color by a delta between 0 and 1. */,
    Member("lighten",List("Number"),"Color") /* Makes a lighter color by a delta between 0 and 1. */,
    Member("to html","String") /* Convert color to HTML syntax (either #FF002A or rgba(255, 0, 42, 0.5) when A is non-1) */,
    Member("hue","Number") /* Gets the hue component of the color. */,
    Member("saturation","Number") /* Gets the saturation component of the color. */,
    Member("brightness","Number") /* Gets the brightness component of the color. */,
    Member("post to wall","Nothing") /* Prints the value to the wall */
  ))

  // New or built-in colors
  addSingleton("Colors", List( 
    Member("accent","Color") /* Gets the accent color in the current theme */,
    Member("subtle","Color") /* Gets the subtle color in the current theme (light gray) */,
    Member("chrome","Color") /* Gets the chrome color in the current theme (control background) */,
    Member("foreground","Color") /* Gets the foreground color in the current theme */,
    Member("background","Color") /* Gets the background color in the current theme */,
    Member("is light theme","Boolean") /* Indicates if the user is using a light theme in their phone */,
    Member("from rgb",List("Number","Number","Number"),"Color") /* Creates a color from the red, green, blue channels (0.0-1.0 range) */,
    Member("from argb",List("Number","Number","Number","Number"),"Color") /* Creates a color from the alpha, red, green, blue channels (0.0-1.0 range) */,
    Member("pink","Color") /* Gets the color that has the ARGB value of #FFFFCBDB */,
    Member("black","Color") /* Gets the color that has the ARGB value of #FF000000 */,
    Member("blue","Color") /* Gets the color that has the ARGB value of #FF0000FF */,
    Member("brown","Color") /* Gets the color that has the ARGB value of #FFA52A2A */,
    Member("cyan","Color") /* Gets the color that has the ARGB value of #FF00FFFF */,
    Member("dark gray","Color") /* Gets the color that has the ARGB value of #FFA9A9A9 */,
    Member("gray","Color") /* Gets the color that has the ARGB value of #FF808080 */,
    Member("green","Color") /* Gets the color that has the ARGB value of #FF008000 */,
    Member("light gray","Color") /* Gets the color that has the ARGB value of #FFD3D3D3 */,
    Member("magenta","Color") /* Gets the color that has the ARGB value of #FFFF00FF */,
    Member("orange","Color") /* Gets the color that has the ARGB value of #FFFFA500 */,
    Member("purple","Color") /* Gets the color that has the ARGB value of #FF800080 */,
    Member("red","Color") /* Gets the color that has the ARGB value of #FFFF0000 */,
    Member("transparent","Color") /* Gets the color that has the ARGB value of #00FFFFFF */,
    Member("white","Color") /* Gets the color that has the ARGB value of #FFFFFFFF */,
    Member("yellow","Color") /* Gets the color that has the ARGB value of #FFFFFF00 */,
    Member("sepia","Color") /* Gets the color that has the ARGB value of #FF704214 */,
    Member("linear gradient",List("Color","Color","Number"),"Color") /* Computes an intermediate color */,
    Member("rand","Color") /* Renamed to 'random' */,
    Member("random","Color") /* Picks a random color */,
    Member("from hsb",List("Number","Number","Number"),"Color") /* Creates a color from the hue, saturation, brightness channels (0.0-1.0 range) */,
    Member("from ahsb",List("Number","Number","Number","Number"),"Color") /* Creates a color from the alpha, hue, saturation, brightness channels (0.0-1.0 range) */
  ))

  // A contact
  addType("Contact", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("id","String") /* Gets the user id if any */,
    Member("set id",List("String"),"Nothing") /* Sets the user id */,
    Member("name","String") /* Gets the display name (not used when saving contact) */,
    Member("first name","String") /* Gets the first name if any. */,
    Member("set first name",List("String"),"Nothing") /* Sets the first name */,
    Member("last name","String") /* Gets the last name if any. */,
    Member("set last name",List("String"),"Nothing") /* Sets the last name */,
    Member("nick name","String") /* Gets the nickname if any. */,
    Member("set nick name",List("String"),"Nothing") /* Sets the middle name */,
    Member("middle name","String") /* Gets the middle name if any. */,
    Member("set middle name",List("String"),"Nothing") /* Sets the middle name */,
    Member("title","String") /* Gets the name title if any. */,
    Member("set title",List("String"),"Nothing") /* Sets the title */,
    Member("suffix","String") /* Gets the name suffix if any. */,
    Member("set suffix",List("String"),"Nothing") /* Sets the suffix */,
    Member("company","String") /* Gets the company name if any. */,
    Member("set company",List("String"),"Nothing") /* Sets the company */,
    Member("job title","String") /* Gets the job title at the company if any. */,
    Member("set job title",List("String"),"Nothing") /* Sets the job title */,
    Member("office","String") /* Gets the office location at the company if any. */,
    Member("set office",List("String"),"Nothing") /* Sets the office location at the company */,
    Member("work address","String") /* Gets the home address if any */,
    Member("set work address",List("String"),"Nothing") /* Sets the work address */,
    Member("home address","String") /* Gets the work address if any */,
    Member("set home address",List("String"),"Nothing") /* Sets the home address */,
    Member("source","String") /* Gets the source of this contact (phone, etc...) */,
    Member("set source",List("String"),"Nothing") /* Sets the source */,
    Member("birthday","DateTime") /* Gets the birth date if any. */,
    Member("set birthday",List("DateTime"),"Nothing") /* Sets the birthday */,
    Member("picture","Picture") /* Gets the picture of the contact if any. */,
    Member("set picture",List("Picture"),"Nothing") /* Sets the picture */,
    Member("set Picture url",List("String"),"Nothing") /* Sets the picture url */,
    Member("email","Link") /* Gets the work or personal email if any */,
    Member("set email",List("String"),"Nothing") /* Sets the work or personal email */,
    Member("work email","Link") /* Gets the work email if any */,
    Member("set work email",List("String"),"Nothing") /* Sets the work email */,
    Member("personal email","Link") /* Gets the personal email if any */,
    Member("set personal email",List("String"),"Nothing") /* Sets the personal email */,
    Member("phone number","Link") /* Gets the cell or work or home phone number if any */,
    Member("set phone number",List("String"),"Nothing") /* Sets the cell or work or home phone number if any */,
    Member("home phone","Link") /* Gets the home phone number if any */,
    Member("set home phone",List("String"),"Nothing") /* Sets the home phone */,
    Member("work phone","Link") /* Gets the work phone number if any */,
    Member("set work phone",List("String"),"Nothing") /* Sets the work phone */,
    Member("mobile phone","Link") /* Gets the cell phone number if any */,
    Member("set mobile phone",List("String"),"Nothing") /* Sets the mobile phone */,
    Member("web site","Link") /* Gets the web site if any */,
    Member("set web site",List("String"),"Nothing") /* Sets the web site */,
    Member("post to wall","Nothing") /* Posts the contact to the wall */
  ))

  // A collection of contacts
  addType("Contact Collection", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("name","String") /* [**obsolete**] Gets the name of this collection */,
    Member("set name",List("String"),"Nothing") /* [**obsolete**] Sets the name of this collection */,
    Member("count","Number") /* Gets the number of contacts */,
    Member("at index",List("Number"),"Contact") /* ONLY INSIDE SAMPLE: an accessor which is always number based */,
    Member("copy","Contact Collection") /* ONLY INSIDE SAMPLE: cloning a collection*/,
    Member("at",List("Number"),"Contact") /* Gets the contact at index */,
    Member("set at",List("Number","Contact"),"Nothing") /* [**obsolete**] Sets the contact at index */,
    Member("clear","Nothing") /* [**obsolete**] Clears the collection */,
    Member("add",List("Contact"),"Nothing") /* [**obsolete**] Adds a contact */,
    Member("post to wall","Nothing") /* Posts the contacts on the wall */
  ))

  // Correctness helpers
  addSingleton("Contract", List( 
    Member("requires",List("Boolean","String"),"Nothing") /* Specifies a precondition contract for the action; if the condition is false, execution fails. Does nothing for published scripts. */,
    Member("assert",List("Boolean","String"),"Nothing") /* Checks for a condition; if the condition is false, execution fails. Does nothing for published scripts. */
  ))

  // A combination of date and time
  addType("DateTime", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("to json","Json Object") /* Converts the value into a json data structure. */,
    Member("add days",List("Number"),"DateTime") /* Returns a date that adds the specified number of days to the value of this instance. */,
    Member("add hours",List("Number"),"DateTime") /* Returns a date that adds the specified number of hours to the value of this instance. */,
    Member("add minutes",List("Number"),"DateTime") /* Returns a date that adds the specified number of minutes to the value of this instance. */,
    Member("add seconds",List("Number"),"DateTime") /* Returns a date that adds the specified number of seconds to the value of this instance. */,
    Member("add milliseconds",List("Number"),"DateTime") /* Returns a date that adds the specified number of milliseconds to the value of this instance. */,
    Member("subtract",List("DateTime"),"Number") /* Computes the difference between date-times in seconds */,
    Member("equals",List("DateTime"),"Boolean") /* Compares dates for equality */,
    Member("not equals",List("DateTime"),"Boolean") /* Compares dates for disequality */,
    Member("less or equals",List("DateTime"),"Boolean") /* Compares dates for less or equal */,
    Member("less",List("DateTime"),"Boolean") /* Compares dates for less */,
    Member("greater or equal",List("DateTime"),"Boolean") /* Compares dates for greater or equal */,
    Member("greater",List("DateTime"),"Boolean") /* Compares dates for greater */,
    Member("to string","String") /* Converts a dates to a string */,
    Member("date","DateTime") /* Gets the date */,
    Member("from now","String") /* Converts into text that describes the elapsed time in a friendly way. */,
    Member("day","Number") /* Gets the day of the month */,
    Member("hour","Number") /* Gets the hour */,
    Member("millisecond","Number") /* Gets the millisecond */,
    Member("minute","Number") /* Gets the minute */,
    Member("month","Number") /* Gets the month */,
    Member("second","Number") /* Gets the second */,
    Member("year","Number") /* Gets the year */,
    Member("week day","Number") /* Gets the day of the week (sunday = 0, monday = 1, ... saturday = 6) */,
    Member("year day","Number") /* Gets the day of the year between 1 and 366 */,
    Member("add years",List("Number"),"DateTime") /* [**not implemented**] Returns a date that adds the specified number of years to the value of this instance. */,
    Member("add months",List("Number"),"DateTime") /* [**not implemented**] Returns a date that adds the specified number of months to the value of this instance. */,
    Member("to universal time","DateTime") /* Converts coordinated universal time */,
    Member("to local time","DateTime") /* [**not implemented**] Converts to the local time */,
    Member("post to wall","Nothing") /* Prints the date to the wall */
  ))

  // A device on the home network
  addType("Device", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("name","String") /* Gets the friendly name of the device */,
    Member("set name",List("String"),"Nothing") /* Sets the friendly name of the device */,
    Member("manufacturer","String") /* [**not implemented**] Gets the manfacturer name */,
    Member("browse","Nothing") /* [**not implemented**] Browses to the device control panel */,
    Member("post to wall","Nothing") /* [**not implemented**] Display the device to the wall */,
    Member("is connected","Boolean") /* [**not implemented**] Checks if the device is connected */
  ))

  // A collection of devices
  addType("Device Collection", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("count","Number") /* [**not implemented**] Gets the number of devices */,
    Member("at index",List("Number"),"Device") /* ONLY INSIDE SAMPLE: an accessor which is always number based */,
    Member("copy","Device Collection") /* ONLY INSIDE SAMPLE: cloning a collection*/,
    Member("at",List("Number"),"Device") /* [**not implemented**] Gets the device at index */,
    Member("post to wall","Nothing") /* [**not implemented**] Posts the devices on the wall */
  ))

  // An general enumerator
  addType("Enumerator", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("current","Nothing") /* [**not implemented**] Return current value */,
    Member("move next","Boolean") /* [**not implemented**] Advance enumerator and return true if there is another element. */
  ))

  // A builder to create HTML Form data
  addType("Form Builder", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("post to wall","Nothing") /* Displays the form to the wall */,
    Member("add string",List("String","String"),"Nothing") /* Adds a string value */,
    Member("add number",List("String","Number"),"Nothing") /* Adds a number value */,
    Member("add boolean",List("String","Boolean"),"Nothing") /* Adds a boolean value */,
    Member("add picture",List("String","Picture","String"),"Nothing") /* Adds a picture */
  ))

  // Interact with devices in the home network. Devices must be UPnP™ compatible.
  addSingleton("Home", List( 
    Member("printers","Printer Collection") /* [**not implemented**] Gets the printers on the current wireless network */,
    Member("players","Media Player Collection") /* [**not implemented**] Gets the media players on the current wireless network */,
    Member("servers","Media Server Collection") /* [**not implemented**] Gets the media servers on the home network */,
    Member("choose printer","Printer") /* [**not implemented**] Choose a printer on the current wireless network */,
    Member("choose player","Media Player") /* [**not implemented**] Choose a media player on the current wireless network */,
    Member("choose server","Media Server") /* [**not implemented**] Choose a media server on the current wireless network */
  ))

  // Create invalid values
  addSingleton("Invalid", List( 
    Member("number","Number") /* Creates an invalid Number instance */,
    Member("boolean","Boolean") /* Creates an invalid Boolean instance */,
    Member("string","String") /* Creates an invalid String instance */,
    Member("string collection","String Collection") /* Creates an invalid String Collection instance */,
    Member("datetime","DateTime") /* Creates an invalid DateTime instance */,
    Member("color","Color") /* Creates an invalid Color instance */,
    Member("picture","Picture") /* Creates an invalid Picture instance */,
    Member("pictures","Pictures") /* Creates an invalid Pictures instance */,
    Member("picture album","Picture Album") /* Creates an invalid Picture Album instance */,
    Member("picture albums","Picture Albums") /* Creates an invalid Picture Albums instance */,
    Member("song","Song") /* Creates an invalid Song instance */,
    Member("songs","Songs") /* Creates an invalid Songs instance */,
    Member("song album","Song Album") /* Creates an invalid Song Album instance */,
    Member("song albums","Song Albums") /* Creates an invalid Song Albums instance */,
    Member("playlist","Playlist") /* Creates an invalid Playlist instance */,
    Member("playlists","Playlists") /* Creates an invalid Playlists instance */,
    Member("location","Location") /* Creates an invalid Location instance */,
    Member("location collection","Location Collection") /* Creates an invalid Location Collection instance */,
    Member("map","Map") /* Creates an invalid Map instance */,
    Member("sound","Sound") /* Creates an invalid Sound instance */,
    Member("json object","Json Object") /* Creates an invalid Json Object instance */,
    Member("link","Link") /* Creates an invalid Link instance */,
    Member("link collection","Link Collection") /* Creates an invalid Link Collection instance */,
    Member("vector3","Vector3") /* Creates an invalid Vector3 instance */,
    Member("number map","Number Map") /* Creates an invalid Number Map instance */,
    Member("string map","String Map") /* Creates an invalid String Map instance */,
    Member("message","Message") /* Creates an invalid Message instance */,
    Member("message collection","Message Collection") /* Creates an invalid Message Collection instance */,
    Member("board","Board") /* Creates an invalid Board instance */,
    Member("sprite","Sprite") /* Creates an invalid Sprite instance */,
    Member("sprite set","Sprite Set") /* Creates an invalid Sprite Set instance */,
    Member("tile","Tile") /* Creates an invalid Tile instance */,
    Member("xml object","Xml Object") /* Creates an invalid Xml Object instance */,
    Member("device","Device") /* Creates an invalid Device instance */,
    Member("device collection","Device Collection") /* Creates an invalid Device Collection instance */,
    Member("printer","Printer") /* Creates an invalid Printer instance */,
    Member("printer collection","Printer Collection") /* Creates an invalid Printer Collection instance */,
    Member("media player","Media Player") /* Creates an invalid Media Player instance */,
    Member("media player collection","Media Player Collection") /* Creates an invalid Media Player Collection instance */,
    Member("media server","Media Server") /* Creates an invalid Media Server instance */,
    Member("media server collection","Media Server Collection") /* Creates an invalid Media Server Collection instance */,
    Member("media link","Media Link") /* Creates an invalid Media Link instance */,
    Member("media link collection","Media Link Collection") /* Creates an invalid Media Link Collection instance */,
    Member("place","Place") /* Creates an invalid Place instance */,
    Member("place collection","Place Collection") /* Creates an invalid Place Collection instance */,
    Member("textbox","TextBox") /* Creates an invalid TextBox instance */,
    Member("contact","Contact") /* Creates an invalid Contact instance */,
    Member("contact collection","Contact Collection") /* Creates an invalid Contact Collection instance */,
    Member("appointment","Appointment") /* Creates an invalid Appointment instance */,
    Member("appointment collection","Appointment Collection") /* Creates an invalid Appointment Collection instance */,
    Member("motion","Motion") /* Creates an invalid Motion instance */,
    Member("camera","Camera") /* Creates an invalid Camera instance */,
    Member("web request","Web Request") /* Creates an invalid Web Request instance */,
    Member("web response","Web Response") /* Creates an invalid Web Response instance */,
    Member("number collection","Number Collection") /* Creates an invalid Number Collection instance */,
    Member("page","Page") /* Creates an invalid Page instance */,
    Member("page button","Page Button") /* Creates an invalid Page Button instance */,
    Member("page collection","Page Collection") /* Creates an invalid Page Collection instance */,
    Member("matrix","Matrix") /* Creates an invalid Matrix instance */,
    Member("action","Action") /* Creates an invalid Action instance */,
    Member("text action","Action") /* Creates an invalid Text Action instance */,
    Member("position action","Action") /* Creates an invalid Position Action instance */,
    Member("vector action","Action") /* Creates an invalid Vector Action instance */,
    Member("webresponse action","Action") /* Creates an invalid WebResponse Action instance */,
    Member("sprite action","Action") /* Creates an invalid Sprite Action instance */,
    Member("sprite set action","Action") /* Creates an invalid Sprite Set Action instance */,
    Member("json builder","Json Builder") /* Creates an invalid Json Builder instance */,
    Member("message collection action","Action") /* Creates an invalid Message Collection Action instance */,
    Member("oauth response","OAuth Response") /* Creates an invalid OAuth Response instance */,
    Member("form builder","Form Builder") /* Creates an invalid Form Builder instance */,
    Member("bluetooth device","Bluetooth Device") /* Creates an invalid BlueTooth Device instance */
  ))

  // A json data structure builder
  addType("Json Builder", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("set field",List("String","Json Object"),"Nothing") /* Sets the field value. */,
    Member("set builder",List("String","Json Builder"),"Nothing") /* Sets the field the the reference to JsonBuilder. */,
    Member("set string",List("String","String"),"Nothing") /* Sets the string value. */,
    Member("set number",List("String","Number"),"Nothing") /* Sets the number value. */,
    Member("set boolean",List("String","Boolean"),"Nothing") /* Sets the boolean value. */,
    Member("set sound",List("String","Sound"),"Nothing") /* Sets the Sound value as a data uri. */,
    Member("set picture",List("String","Picture","Number"),"Nothing") /* Sets the Picture value as a data uri. */,
    Member("set field null",List("String"),"Nothing") /* Sets the field value as null. */,
    Member("add",List("Json Object"),"Nothing") /* Adds a value to the array. */,
    Member("add builder",List("Json Builder"),"Nothing") /* Add a reference to JsonBuilder to the array. */,
    Member("clear","Nothing") /* Deletes all array elements from the current builder. */,
    Member("add null","Nothing") /* Adds a null value to the array. */,
    Member("to json","Json Object") /* Converts the builder into a json data structure */,
    Member("count","Number") /* Gets the number of values */,
    Member("at index",List("Number"),"Json Builder") /* ONLY INSIDE SAMPLE: an accessor which is always number based */,
    Member("copy","Json Builder") /* ONLY INSIDE SAMPLE: cloning a collection*/,
    Member("at",List("Number"),"Json Builder") /* Gets the i-th json value */,
    Member("set at",List("Number","Json Builder"),"Nothing") /* Sets the i-th json value */,
    Member("remove at",List("Number"),"Nothing") /* Removes the i-th json value */,
    Member("remove field",List("String"),"Nothing") /* Deletes named field */,
    Member("boolean",List("String"),"Boolean") /* Gets a field value as a boolean */,
    Member("contains key",List("String"),"Boolean") /* Indicates if the key exists */,
    Member("time",List("String"),"DateTime") /* Gets the field value as a time */,
    Member("field",List("String"),"Json Builder") /* Gets a value by name */,
    Member("keys","String Collection") /* Gets the list of keys */,
    Member("kind","String") /* Gets a json kind (string, number, object, array, boolean, null) */,
    Member("number",List("String"),"Number") /* Gets a field value as a number */,
    Member("string",List("String"),"String") /* Gets a field value as a string */,
    Member("post to wall","Nothing") /* Prints the value to the wall */,
    Member("to boolean","Boolean") /* Converts to a boolean (type must be boolean) */,
    Member("to number","Number") /* Converts to a number (type must be number) */,
    Member("to string","String") /* Converts to a string (type must be string) */,
    Member("to time","DateTime") /* Converts and parses to a date time (type must be string) */,
    Member("serialize","String") /* Stringify the current JSON object */
  ))

  // A json data structure.
  addType("Json Object", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("count","Number") /* Gets the number of values */,
    Member("at index",List("Number"),"Json Object") /* ONLY INSIDE SAMPLE: an accessor which is always number based */,
    Member("copy","Json Object") /* ONLY INSIDE SAMPLE: cloning a collection*/,
    Member("at",List("Number"),"Json Object") /* Gets the i-th json value */,
    Member("boolean",List("String"),"Boolean") /* Gets a field value as a boolean */,
    Member("contains key",List("String"),"Boolean") /* Indicates if the key exists */,
    Member("time",List("String"),"DateTime") /* Gets the field value as a time */,
    Member("field",List("String"),"Json Object") /* Gets a value by name */,
    Member("keys","String Collection") /* Gets the list of keys */,
    Member("kind","String") /* Gets a json kind (string, number, object, array, boolean, null) */,
    Member("number",List("String"),"Number") /* Gets a field value as a number */,
    Member("string",List("String"),"String") /* Gets a field value as a string */,
    Member("post to wall","Nothing") /* Prints the value to the wall */,
    Member("to boolean","Boolean") /* Converts to a boolean (type must be boolean) */,
    Member("to number","Number") /* Converts to a number (type must be number) */,
    Member("to string","String") /* Converts to a string (type must be string) */,
    Member("to time","DateTime") /* Converts and parses to a date time (type must be string) */,
    Member("serialize","String") /* Stringify the current JSON object */,
    Member("to json builder","Json Builder") /* Copy current JSON object into a Json Builder so it can be modified */
  ))

  // Translation, speech to text, ...
  addSingleton("Languages", List( 
    Member("current language","String") /* Gets the current language code, to be used in the 'translate' method. */,
    Member("speech to text",List("String","Sound"),"String") /* [**not implemented**] [**obsolete**] Converts a sound to a text using Project Hawaii from Microsoft Research. */,
    Member("picture to text",List("String","Picture"),"String") /* Extracts text in the picture using Project Hawaii from Microsoft Research. */,
    Member("record text","String") /* Converts the microphone dictation to text. */,
    Member("translate",List("String","String","String"),"String") /* Translates some text between two languages using Bing. Empty source language to auto-detect. */,
    Member("detect language",List("String"),"String") /* Automatically detects the language of a given text using Bing. */,
    Member("speak",List("String","String"),"Sound") /* [**obsolete**] This api was renamed. Use `speak_text` instead. */,
    Member("speak text",List("String","String","String"),"Nothing") /* Speaks the text immediately using the text-to-speech engine on the device. */,
    Member("speak ssml",List("Xml Object"),"Nothing") /* Speaks the SSML markup immediately using the text-to-speech engine on the device. */
  ))

  // A link to a video, image, email, phone number
  addType("Link", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("name","String") /* Gets the name if any */,
    Member("set name",List("String"),"Nothing") /* Sets the name */,
    Member("location","Location") /* Gets the location if any */,
    Member("set location",List("Location"),"Nothing") /* Sets the location */,
    Member("address","String") /* Gets the url */,
    Member("kind","String") /* Gets the kind of asset - media, image, email, phone number, hyperlink, deep zoom link, radio */,
    Member("share",List("String"),"Nothing") /* Shares the link (email, sms, facebook, social or '' to pick from a list) */,
    Member("post to wall","Nothing") /* Displays the link on the wall */
  ))

  // A list of links
  addType("Link Collection", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("count","Number") /* Gets the number of elements */,
    Member("clear","Nothing") /* Clears the collection */,
    Member("add",List("Link"),"Nothing") /* Adds a link */,
    Member("add many",List("Link Collection"),"Nothing") /* Adds many links at once */,
    Member("index of",List("Link","Number"),"Number") /* Gets the index of the first occurence of item. Returns -1 if not found or start is out of range. */,
    Member("at index",List("Number"),"Link") /* ONLY INSIDE SAMPLE: an accessor which is always number based */,
    Member("copy","Link Collection") /* ONLY INSIDE SAMPLE: cloning a collection*/,
    Member("at",List("Number"),"Link") /* Gets the i-th link */,
    Member("remove",List("Link"),"Boolean") /* Removes the first occurence of the link. Returns true if removed. */,
    Member("remove at",List("Number"),"Nothing") /* Removes the link at position index. */,
    Member("reverse","Nothing") /* Reverses the order of the elements. */,
    Member("random","Link") /* Gets a random element from the collection. Returns invalid if the collection is empty. */,
    Member("set at",List("Number","Link"),"Nothing") /* Sets the i-th link */,
    Member("insert at",List("Number","Link"),"Nothing") /* Inserts a link at position index. Does nothing if index is out of range. */,
    Member("post to wall","Nothing") /* Displays the links on the wall */
  ))

  // A geo coordinate (latitude, longitude, ...)
  addType("Location", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("to string","String") /* Converts to a string lat,long */,
    Member("latitude","Number") /* Gets the latitude of the coordinate */,
    Member("longitude","Number") /* Gets the longitude of the coordinate */,
    Member("altitude","Number") /* Gets the altitude of the coordinate */,
    Member("hor accuracy","Number") /* Gets the horizontal accuracy of the coordinate */,
    Member("vert accuracy","Number") /* Gets the vertical accuracy of the coordinate */,
    Member("speed","Number") /* Gets the speed of the coordinate */,
    Member("course","Number") /* Gets the course of the coordinate */,
    Member("equals",List("Location"),"Boolean") /* Indicates if this instance is equal to the other */,
    Member("share",List("String","String"),"Nothing") /* Shares the location (email, sms, social or '' to pick from a list) */,
    Member("distance",List("Location"),"Number") /* Calculates the distance in meters */,
    Member("post to wall","Nothing") /* Displays the location in a map using Bing. */
  ))

  // A list of locations
  addType("Location Collection", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("count","Number") /* Gets the number of elements */,
    Member("clear","Nothing") /* Clears the collection */,
    Member("add",List("Location"),"Nothing") /* Adds a location */,
    Member("add many",List("Location Collection"),"Nothing") /* Adds many locations at once */,
    Member("index of",List("Location","Number"),"Number") /* Gets the index of the first occurence of item. Returns -1 if not found or start is out of range. */,
    Member("at index",List("Number"),"Location") /* ONLY INSIDE SAMPLE: an accessor which is always number based */,
    Member("copy","Location Collection") /* ONLY INSIDE SAMPLE: cloning a collection*/,
    Member("at",List("Number"),"Location") /* Gets the i-th geo coordinate */,
    Member("remove",List("Location"),"Boolean") /* Removes the first occurence of the location. Returns true if removed. */,
    Member("remove at",List("Number"),"Nothing") /* Removes the location at position index. */,
    Member("reverse","Nothing") /* Reverses the order of the elements. */,
    Member("random","Location") /* Gets a random element from the collection. Returns invalid if the collection is empty. */,
    Member("set at",List("Number","Location"),"Nothing") /* Sets the i-th geo coordinate */,
    Member("insert at",List("Number","Location"),"Nothing") /* Inserts a location at position index. Does nothing if index is out of range. */,
    Member("post to wall","Nothing") /* Displays the locations in a map using Bing. */,
    Member("sort by distance",List("Location"),"Nothing") /* [**not implemented**] Sorts by distance to the location */
  ))

  // Geo coordinates
  addSingleton("Locations", List( 
    Member("create location",List("Number","Number"),"Location") /* Creates a new geo coordinate location */,
    Member("create location list","Location Collection") /* Creates an empty list of locations */,
    Member("describe location",List("Location"),"String") /* Looks for an address near a location using Bing. */,
    Member("search location",List("String","String","String","String"),"Location") /* Looks for the coordinate of an address using Bing. */
  ))

  // A Bing map
  addType("Map", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("zoom","Number") /* Gets the zoom level */,
    Member("set zoom",List("Number"),"Nothing") /* Sets the zoom level from 1 (earth) to 21 (street) */,
    Member("center","Location") /* Gets the map center location */,
    Member("set center",List("Location"),"Nothing") /* Sets the map center location */,
    Member("add text",List("Location","String","Color","Color"),"Nothing") /* Adds a text pushpin on the map */,
    Member("add link",List("Link","Color","Color"),"Nothing") /* Adds a link pushpin on the map (ignored if the location if not set) */,
    Member("add message",List("Message","Color","Color"),"Nothing") /* Adds a message pushpin on the map (ignored if the location is not set) */,
    Member("add picture",List("Location","Picture","Color"),"Nothing") /* Adds a picture pushpin on the map */,
    Member("add place",List("Place","Color","Color"),"Nothing") /* Adds a place pushpin on the map (ignored if the location is not set) */,
    Member("add line",List("Location Collection","Color","Number"),"Nothing") /* Adds a polyline that passes through various geocoordinates */,
    Member("fill region",List("Location Collection","Color","Color","Number"),"Nothing") /* Fills a region with a color */,
    Member("clear","Nothing") /* Clears the lines, regions and pushpins */,
    Member("view pushpins","Nothing") /* Changes the current zoom and center so that all the pushpins are visible. This method has no effect if the map is not posted on a the wall yet. */,
    Member("post to wall","Nothing") /* Displays the map in the wall using Bing. */
  ))

  // Maps, location to address, address to location
  addSingleton("Maps", List( 
    Member("create map","Map") /* Creates a Bing map. Use 'post to wall' to display it. */,
    Member("create full map","Map") /* Creates a full screen Bing map. Use 'post to wall' to display it. */,
    Member("directions",List("Location","Location","Boolean"),"Location Collection") /* Calculates the directions between two coordinates using Bing. */,
    Member("open directions",List("String","Location","String","Location"),"Nothing") /* Shows the directions in the Bing map application. If search term is provided, location is ignored.Provide search term or location for start and end. */,
    Member("open map",List("Location","String","Number"),"Nothing") /* Opens the Bing map application. zoom between 0 (close) and 1 (far). */
  ))

  // Mathematical operators, cos, sin, ...
  addSingleton("Math", List( 
    Member("create matrix",List("Number","Number"),"Matrix") /* Creates a matrix of zeros of a given size */,
    Member("ceiling",List("Number"),"Number") /* Returns the smallest integral value greater than or equal to the specified number */,
    Member("floor",List("Number"),"Number") /* Returns the largest integer less than or equal to the specified number */,
    Member("pow",List("Number","Number"),"Number") /* Returns a specified number raised to the specified power */,
    Member("random range",List("Number","Number"),"Number") /* Returns a random integral number between `min` and `max` included. */,
    Member("random",List("Number"),"Number") /* Returns a random integral number bounded between limit and 0, not including limit unless it is 0 */,
    Member("random normalized","Number") /* Returns a random floating-point number x: 0 ≤ x < 1 */,
    Member("rand",List("Number"),"Number") /* Renamed to 'random' */,
    Member("rand norm","Number") /* Renamed to 'random normalized' */,
    Member("mod",List("Number","Number"),"Number") /* Returns the modulus resulting from the division of one number by another number */,
    Member("abs",List("Number"),"Number") /* Returns the absolute value of a number */,
    Member("acos",List("Number"),"Number") /* Returns the angle whose cosine is the specified number */,
    Member("asin",List("Number"),"Number") /* Returns the angle whose sine is the specified number */,
    Member("atan",List("Number"),"Number") /* Returns the angle whose tangent is the specified number */,
    Member("atan2",List("Number","Number"),"Number") /* Returns the angle whose tangent is the quotient of two specified numbers */,
    Member("cos",List("Number"),"Number") /* Returns the cosine of the specified angle (in radians) */,
    Member("e","Number") /* Returns the natural logarithmic base, specified by the constant, e */,
    Member("exp",List("Number"),"Number") /* Returns e raised to the specified power */,
    Member("log",List("Number","Number"),"Number") /* Returns the logarithm of a specified number in a specified base */,
    Member("loge",List("Number"),"Number") /* Returns the natural (base e) logarithm of a specified number */,
    Member("log10",List("Number"),"Number") /* Returns the base 10 logarithm of a specified number */,
    Member("max",List("Number","Number"),"Number") /* Returns the larger of two numbers */,
    Member("min",List("Number","Number"),"Number") /* Returns the smaller of two numbers */,
    Member("π","Number") /* Returns the Pi constant */,
    Member("gravity","Number") /* Returns the gravity constant (9.80665) */,
    Member("round",List("Number"),"Number") /* Rounds a number to the nearest integral value */,
    Member("sign",List("Number"),"Number") /* Returns a value indicating the sign of a number */,
    Member("sin",List("Number"),"Number") /* Returns the sine of the specified angle (in radians) */,
    Member("sqrt",List("Number"),"Number") /* Returns the square root of a specified number */,
    Member("tan",List("Number"),"Number") /* Returns the tangent of the specified angle (in radians) */,
    Member("deg to rad",List("Number"),"Number") /* Converts degrees into radians */,
    Member("rad to deg",List("Number"),"Number") /* Converts rad into degrees */,
    Member("∞₊","Number") /* Returns the positive infinity */,
    Member("∞₋","Number") /* Returns the negative infinity */,
    Member("is ∞",List("Number"),"Boolean") /* Indicates whether number evaluates to negative or positive infinity */,
    Member("is ∞₊",List("Number"),"Boolean") /* Indicates whether number evaluates to positive infinity */,
    Member("is ∞₋",List("Number"),"Boolean") /* Indicates whether number evaluates to negative infinity */,
    Member("is nan",List("Number"),"Boolean") /* Indicates that value cannot be represented as a number, i.e. Not-a-Number. This usually happens when the number is the result of a division by zero. */,
    Member("round with precision",List("Number","Number"),"Number") /* Rounds a number to a specified number of fractional digits. */,
    Member("cosh",List("Number"),"Number") /* Returns the hyperbolic cosine of the specified angle (in radians) */,
    Member("sinh",List("Number"),"Number") /* Returns the hyperbolic sine of the specified angle (in radians) */,
    Member("tanh",List("Number"),"Number") /* Returns the hyperbolic tangent of the specified angle (in radians) */,
    Member("create number map","Number Map") /* Use Collections->create number map instead. */,
    Member("create vector3",List("Number","Number","Number"),"Vector3") /* Creates a 3D vector */,
    Member("ε","Number") /* Returns the machine epsilon, the smallest positive number greater than zero. */,
    Member("ieee remainder",List("Number","Number"),"Number") /* Returns the remainder resulting from the division of a specified number by another specified number */
  ))

  // A 2D matrix of numbers
  addType("Matrix", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("count","Number") /* Gets the total number of elements */,
    Member("row count","Number") /* Gets the number of rows */,
    Member("column count","Number") /* Gets the number of columns */,
    Member("post to wall","Nothing") /* Displays the value of the array on the wall */,
    Member("at index",List("Number"),"Number") /* ONLY INSIDE SAMPLE: an accessor which is always number based */,
    Member("copy","Matrix") /* ONLY INSIDE SAMPLE: cloning a collection*/,
    Member("at",List("Number"),"Number") /* Gets the value at a given index. Elements are ordered line by line starting top left. */,
    Member("set at",List("Number","Number"),"Nothing") /* Sets the value at a given index. Elements are ordered line by line starting top left. */,
    Member("item",List("Number","Number"),"Number") /* Gets the value at a given location. Returns invalid if outside of the array dimensions */,
    Member("set item",List("Number","Number","Number"),"Nothing") /* Sets the value at a particular position. The matrix  will be expanded if the position falls outside the boundaries. */,
    Member("clone","Matrix") /* Creates a deep copy of the matrix. */,
    Member("min","Number") /* Computes the minimum of the values */,
    Member("max","Number") /* Computes the maximum of the values */,
    Member("scale",List("Number"),"Matrix") /* Returns a copy of the matrix scaled by factor. */,
    Member("negate","Matrix") /* Returns the matrix negated. */,
    Member("transpose","Matrix") /* Returns the transposed matrix. */,
    Member("add",List("Matrix"),"Matrix") /* Returns a matrix resulting from adding this matrix to b. The size of both matrices must match. */,
    Member("subtract",List("Matrix"),"Matrix") /* Returns a matrix resulting from subtracting b from this matrix. The size of both matrices must match. */,
    Member("multiply",List("Matrix"),"Matrix") /* Returns a matrix resulting from multiply each element in the matrices. The size of both matrices must match. */,
    Member("to string","String") /* Gets the string representation of the matrix */,
    Member("random","Number") /* Gets a random element. Returns invalid if the matrix is empty. */,
    Member("clear",List("Number"),"Nothing") /* Sets all the element of the matrix to the value. */
  ))

  // Pictures and music...
  addSingleton("Media", List( 
    Member("create picture",List("Number","Number"),"Picture") /* Creates a new picture of the given size */,
    Member("search marketplace",List("String","String"),"Nothing") /* [**not implemented**] Searches the Windows Phone Store (type in applications or music) */,
    Member("playlists","Playlists") /* Gets the playlists on the phone */,
    Member("pictures","Pictures") /* Gets the pictures on the phone */,
    Member("saved pictures","Pictures") /* Gets the saved pictures on the phone */,
    Member("choose picture","Picture") /* Chooses a picture from the media library */,
    Member("picture albums","Picture Albums") /* Gets the picture albums */,
    Member("songs","Songs") /* Gets the songs on the phone */,
    Member("song albums","Song Albums") /* Gets the song albums on the phone */,
    Member("create board",List("Number"),"Board") /* Creates a new game board */,
    Member("create full board","Board") /* [**obsolete**] Creates a new game board in portrait mode. On rotatable devices it will take the entire screen when posted. */,
    Member("create portrait board",List("Number","Number"),"Board") /* Creates a new game board in portrait mode. On rotatable devices it will take the entire screen when posted. */,
    Member("create landscape board",List("Number","Number"),"Board") /* Creates a new game board in landscape mode. On rotatable devices it will take the entire screen when posted. */,
    Member("icon names","String Collection") /* Gets the list of built-in 48x48 icon names. You can see the icon list in the script settings. */,
    Member("icon",List("String"),"Picture") /* Gets a 48x48 icon picture. Use 'media->icon names' to retrieve the list of names available. */,
    Member("large icon",List("String"),"Picture") /* Gets a 96x96 icon picture. Use 'media->icon names' to retrieve the list of names available. */
  ))

  // A media file on the home network
  addType("Media Link", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("title","String") /* Gets the title if available */,
    Member("author","String") /* Gets the author if available */,
    Member("album","String") /* Gets the album if available */,
    Member("date","DateTime") /* Gets the date if available */,
    Member("duration","Number") /* Gets the duration in seconds (0 for pictures) */,
    Member("kind","String") /* Gets the kind of media (video, song, picture) */,
    Member("post to wall","Nothing") /* Post the media to the wall */,
    Member("play","Nothing") /* Plays or displays the media on the phone */
  ))

  // A list of media links on the home network
  addType("Media Link Collection", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("count","Number") /* Gets the number of elements */,
    Member("at index",List("Number"),"Media Link") /* ONLY INSIDE SAMPLE: an accessor which is always number based */,
    Member("copy","Media Link Collection") /* ONLY INSIDE SAMPLE: cloning a collection*/,
    Member("at",List("Number"),"Media Link") /* Gets the i-th media link */,
    Member("post to wall","Nothing") /* Displays the links on the wall */
  ))

  // An audio/video player on the home network
  addType("Media Player", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("volume","Number") /* Gets the current volume */,
    Member("set volume",List("Number"),"Nothing") /* Sets the current value */,
    Member("device","Device") /* [**not implemented**] Gets the detailled information about this device */,
    Member("name","String") /* [**not implemented**] Gets the name of the audio/video player */,
    Member("post to wall","Nothing") /* [**not implemented**] Display the player to the wall */,
    Member("is control supported","Boolean") /* [**not implemented**] Indicates the media can be played, paused, resumed */,
    Member("resume","Nothing") /* [**not implemented**] Resumes playing the current media if any. */,
    Member("stop","Nothing") /* [**not implemented**] Stops the current media if any. */,
    Member("pause","Nothing") /* [**not implemented**] Pauses the current media if any. */,
    Member("next","Nothing") /* [**not implemented**] Moves the player to the next media in the queue. */,
    Member("previous","Nothing") /* [**not implemented**] Moves the player to the previous media in the queue. */,
    Member("play","Nothing") /* [**not implemented**] Plays the current media from the start. */,
    Member("play media",List("String"),"Nothing") /* [**not implemented**] Plays the media at the 'url' internet address. */,
    Member("play home media",List("Media Link"),"Nothing") /* [**not implemented**] Plays a media from the home network. */,
    Member("active media","String") /* [**not implemented**] Gets the uri of the media currently active */,
    Member("play position","Number") /* [**not implemented**] Gets the position in seconds whithin the active media */,
    Member("is stopped","Boolean") /* [**not implemented**] Indicates if the player is stopped */,
    Member("is playing","Boolean") /* [**not implemented**] Indicates if the player is playing */,
    Member("is paused","Boolean") /* [**not implemented**] Indicates if the player is paused */,
    Member("status","String") /* [**not implemented**] Gets the status of the player */,
    Member("is volume supported","Boolean") /* [**not implemented**] Indicates if volume can be changed */
  ))

  // A collection of media players
  addType("Media Player Collection", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("count","Number") /* [**not implemented**] Gets the number of media players */,
    Member("clear","Nothing") /* [**not implemented**] [**obsolete**] Clears the players */,
    Member("add",List("Media Player"),"Nothing") /* [**not implemented**] [**obsolete**] Adds a new player to the collection */,
    Member("at index",List("Number"),"Media Player") /* ONLY INSIDE SAMPLE: an accessor which is always number based */,
    Member("copy","Media Player Collection") /* ONLY INSIDE SAMPLE: cloning a collection*/,
    Member("at",List("Number"),"Media Player") /* [**not implemented**] Gets the media player at index */,
    Member("post to wall","Nothing") /* [**not implemented**] Posts the media players on the wall */
  ))

  // A media server on the home network
  addType("Media Server", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("device","Device") /* [**not implemented**] Gets the detailled information about this device */,
    Member("name","String") /* [**not implemented**] Gets the name of the printer */,
    Member("post to wall","Nothing") /* [**not implemented**] Display the printer to the wall */,
    Member("songs","Media Link Collection") /* [**not implemented**] Gets a list of all songs */,
    Member("videos","Media Link Collection") /* [**not implemented**] Gets a list of all videos */,
    Member("pictures","Media Link Collection") /* [**not implemented**] Gets a list of all pictures */,
    Member("search songs",List("String"),"Media Link Collection") /* [**not implemented**] Searches for songs */,
    Member("search videos",List("String"),"Media Link Collection") /* [**not implemented**] Searches for videos */,
    Member("search videos by date",List("DateTime","DateTime"),"Media Link Collection") /* [**not implemented**] Searches for videos in a particular date range. */,
    Member("search pictures by date",List("DateTime","DateTime"),"Media Link Collection") /* [**not implemented**] Searches for pictures in a particular date range. */,
    Member("choose song","Media Link") /* [**not implemented**] Chooses a song */,
    Member("choose video","Media Link") /* [**not implemented**] Chooses a video or a movie */,
    Member("choose picture","Media Link") /* [**not implemented**] Chooses a picture */
  ))

  // A collection of media servers
  addType("Media Server Collection", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("count","Number") /* [**not implemented**] Gets the number of media players */,
    Member("clear","Nothing") /* [**not implemented**] [**obsolete**] Clears the servers */,
    Member("add",List("Media Server"),"Nothing") /* [**not implemented**] [**obsolete**] Adds a new server to the collection */,
    Member("at index",List("Number"),"Media Server") /* ONLY INSIDE SAMPLE: an accessor which is always number based */,
    Member("copy","Media Server Collection") /* ONLY INSIDE SAMPLE: cloning a collection*/,
    Member("at",List("Number"),"Media Server") /* [**not implemented**] Gets the media player at index */,
    Member("post to wall","Nothing") /* [**not implemented**] Posts the media players on the wall */
  ))

  // A post on a message board
  addType("Message", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("title","String") /* Gets the title text */,
    Member("set title",List("String"),"Nothing") /* Sets the title text */,
    Member("message","String") /* Gets the message text */,
    Member("set message",List("String"),"Nothing") /* Sets the message text */,
    Member("id","String") /* Gets the message identifier */,
    Member("set id",List("String"),"Nothing") /* Sets the message identifier */,
    Member("from","String") /* Gets the author */,
    Member("set from",List("String"),"Nothing") /* Sets the author */,
    Member("to","String") /* Gets the recipient */,
    Member("set to",List("String"),"Nothing") /* Sets the recipient */,
    Member("picture link","String") /* Gets a url to the picture */,
    Member("set picture link",List("String"),"Nothing") /* Sets the url to the picture */,
    Member("link","String") /* Gets the link associated to the message */,
    Member("set link",List("String"),"Nothing") /* Sets the link associated to the message */,
    Member("media link","String") /* Gets a url to the media */,
    Member("set media link",List("String"),"Nothing") /* Sets the url to the media */,
    Member("location","Location") /* Gets the geo coordinates */,
    Member("set location",List("Location"),"Nothing") /* Sets the geo coordinates */,
    Member("time","DateTime") /* Gets the time */,
    Member("set time",List("DateTime"),"Nothing") /* Sets the time */,
    Member("source","String") /* Gets the source of this message (Facebook, Twitter, etc...) */,
    Member("set source",List("String"),"Nothing") /* Sets the source of this message */,
    Member("share",List("String"),"Nothing") /* Shares this message (email, sms, facebook, social or '' to pick from a list) */,
    Member("values","String Map") /* Gets the additional values stored in the message */,
    Member("post to wall","Nothing") /* Posts the message to the wall */
  ))

  // A list of messages
  addType("Message Collection", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("continuation","String") /* Gets the identifier of the next set of messages */,
    Member("set continuation",List("String"),"Nothing") /* Sets the identifier of the next set of messages */,
    Member("count","Number") /* Gets the number of elements */,
    Member("clear","Nothing") /* Clears the collection */,
    Member("add",List("Message"),"Nothing") /* Adds a Message */,
    Member("add many",List("Message Collection"),"Nothing") /* Adds a collection of Message items */,
    Member("index of",List("Message","Number"),"Number") /* Gets the index of the first occurence of item. Returns -1 if not found or start is out of range. */,
    Member("at index",List("Number"),"Message") /* ONLY INSIDE SAMPLE: an accessor which is always number based */,
    Member("copy","Message Collection") /* ONLY INSIDE SAMPLE: cloning a collection*/,
    Member("at",List("Number"),"Message") /* Gets the i-th Message */,
    Member("remove",List("Message"),"Boolean") /* Removes the first occurence of the message. Returns true if removed. */,
    Member("remove at",List("Number"),"Nothing") /* Removes the message at position index. */,
    Member("reverse","Nothing") /* Reverses the order of the elements. */,
    Member("random","Message") /* Gets a random element from the collection. Returns invalid if the collection is empty. */,
    Member("set at",List("Number","Message"),"Nothing") /* Sets the i-th Message */,
    Member("insert at",List("Number","Message"),"Nothing") /* Inserts a link at position index. Does nothing if index is out of range. */,
    Member("post to wall","Nothing") /* Displays the Messages in the wall */,
    Member("sort by date","Nothing") /* Sorts from the newest to oldest */
  ))

  // Describes the motion of the device
  addType("Motion", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("acceleration","Vector3") /* Gets the linear acceleration of the device, in gravitational units. */,
    Member("rotation speed","Vector3") /* Gets the device rotation speed in degrees per sec. */,
    Member("gravity","Vector3") /* Gets the gravity vector associated with this reading. */,
    Member("time","DateTime") /* Gets a timestamp indicating the time at which the reading was calculated. */,
    Member("yaw","Number") /* Gets the yaw of the attitude in degrees */,
    Member("pitch","Number") /* Gets the pitch of the attitude in degrees */,
    Member("roll","Number") /* Gets the roll of the attitude in degrees */,
    Member("post to wall","Nothing") /* Displays the motion reading to the wall. */
  ))

  // A number (possibly negative and/or fractional)
  addType("Number", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("to string","String") /* Converts a number to a string */,
    Member("post to wall","Nothing") /* Prints the number to the wall */,
    Member("to character","String") /* Interprets a number as a unicode value and converts it to the single character string */,
    Member("to color","Color") /* Interprets the number as a ARGB (alpha, red, green, blue) color */,
    Member("to json","Json Object") /* Converts the value into a json data structure. */,
    Member("+",List("Number"),"Number") /* Adds numbers */,
    Member("-",List("Number"),"Number") /* Subtracts numbers */,
    Member("*",List("Number"),"Number") /* Multiplies numbers */,
    Member("/",List("Number"),"Number") /* Divides numbers */,
    Member("=",List("Number"),"Boolean") /* Compares numbers for equality */,
    Member("≠",List("Number"),"Boolean") /* Compares numbers for disequality */,
    Member("≤",List("Number"),"Boolean") /* Compares numbers for less or equal */,
    Member("<",List("Number"),"Boolean") /* Compares numbers for less */,
    Member("≥",List("Number"),"Boolean") /* Compares numbers for more or equal */,
    Member(">",List("Number"),"Boolean") /* Compares numbers for more */
  ))

  // A collection of numbers
  addType("Number Collection", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("count","Number") /* Gets the number of items */,
    Member("clear","Nothing") /* Clears the numbers */,
    Member("add",List("Number"),"Nothing") /* Adds a number at the end of the collection */,
    Member("add many",List("Number Collection"),"Nothing") /* Adds many numbers at once */,
    Member("index of",List("Number","Number"),"Number") /* Gets the index of the first occurence of a number. Returns -1 if not found or start is out of range. */,
    Member("at index",List("Number"),"Number") /* ONLY INSIDE SAMPLE: an accessor which is always number based */,
    Member("copy","Number Collection") /* ONLY INSIDE SAMPLE: cloning a collection*/,
    Member("at",List("Number"),"Number") /* Gets the number at position index. Returns invalid if index is out of range */,
    Member("remove",List("Number"),"Boolean") /* Removes the first occurence of a number. Returns true if removed. */,
    Member("remove at",List("Number"),"Nothing") /* Removes the number at position index. */,
    Member("reverse","Nothing") /* Reverses the items */,
    Member("random","Number") /* Gets a random element from the collection. Returns invalid if the collection is empty. */,
    Member("set at",List("Number","Number"),"Nothing") /* Sets the number at position index. Does nothing if the index is out of range. */,
    Member("insert at",List("Number","Number"),"Nothing") /* Inserts a double at position index. Does nothing if index is out of range. */,
    Member("min","Number") /* Computes the minimum of the values */,
    Member("max","Number") /* Computes the maximum of the values */,
    Member("sum","Number") /* Computes the sum of the values */,
    Member("avg","Number") /* Computes the average of the values */,
    Member("contains",List("Number"),"Boolean") /* Indicates if the collection contains the item */,
    Member("post to wall","Nothing") /* Displays the numbers on the wall */,
    Member("sort","Nothing") /* Sorts the numbers in this collection */
  ))

  // A map of numbers to numbers
  addType("Number Map", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("count","Number") /* Gets the number of elements */,
    Member("clear","Nothing") /* Clears the number map. */,
    Member("sum","Number") /* Computes the sum of the values */,
    Member("avg","Number") /* Computes the average of the values */,
    Member("slice",List("Number","Number"),"Number Map") /* Extracts the elements at indices between start (inclusive) and end (non-inclusive). */,
    Member("min","Number") /* Computes the minimum of the values */,
    Member("max","Number") /* Computes the maximum of the values */,
    Member("at index",List("Number"),"Number") /* ONLY INSIDE SAMPLE: an accessor which is always number based */,
    Member("copy","Number Map") /* ONLY INSIDE SAMPLE: cloning a collection*/,
    Member("at",List("Number"),"Number") /* Gets the element at index. Index may be any floating-point value. */,
    Member("set at",List("Number","Number"),"Nothing") /* Sets the element at index. Index may be any floating-point value. */,
    Member("set many",List("Number Map"),"Nothing") /* Sets many elements at once. */,
    Member("remove",List("Number"),"Nothing") /* Removes the value at a given index */,
    Member("update on wall","Nothing") /* Updates any display of this map */,
    Member("post to wall","Nothing") /* Displays the map in a line chart; you need to call 'update on wall' later if you want changes to be reflected. */
  ))

  // OAuth 2.0 Access Token or Error as described in http://tools.ietf.org/html/rfc6749.
  addType("OAuth Response", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("access token","String") /* The access token issued by the authorization server. */,
    Member("expires in","Number") /* (Optional) The lifetime in seconds of the access token. */,
    Member("scope","String") /* (Optional) Optional if identical to the scope requested by the client; otherwise, the scope of the access token as described by Section 3.3 of the OAuth 2.0 specification. */,
    Member("error","String") /* A single ASCII [USASCII] error code. */,
    Member("error description","String") /* (Optional) A human readable error code. */,
    Member("error uri","String") /* (Optional) A URI identifying a human-readable web page with information about the error, used to provide the client developer with additional information about the error. */,
    Member("others","String Map") /* (Optional) Additional key-value pairs not covered by the OAuth 2.0 specification. */,
    Member("is expiring",List("Number"),"Boolean") /* (Optional) Indicates if the token might expire within the next seconds. */,
    Member("is error","Boolean") /* Indicates if this response is an error. */,
    Member("post to wall","Nothing") /* Displays the response. */
  ))

  // A page on a wall
  addType("Page", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("equals",List("Page"),"Boolean") /* Gets a value indicating if the page is equal to the other */,
    Member("post to wall","Nothing") /* Does nothing. */
  ))

  // A page button on the wall
  addType("Page Button", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("page","Page") /* Gets the page hosting this button */,
    Member("equals",List("Page Button"),"Boolean") /* Gets a value indicating if both instances are equal */,
    Member("post to wall","Nothing") /* Pushes this button on the wall */,
    Member("icon","String") /* Gets the icon name */,
    Member("text","String") /* Gets the text */
  ))

  // A collection of page
  addType("Page Collection", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("count","Number") /* Gets the number of pages */,
    Member("at index",List("Number"),"Page") /* ONLY INSIDE SAMPLE: an accessor which is always number based */,
    Member("copy","Page Collection") /* ONLY INSIDE SAMPLE: cloning a collection*/,
    Member("at",List("Number"),"Page") /* Gets the pages at index */,
    Member("post to wall","Nothing") /* Posts the pages on the wall */
  ))

  // Phone numbers, vibrate, etc...
  addSingleton("Phone", List( 
    Member("dial phone number",List("String"),"Nothing") /* Starts a phone call */,
    Member("choose phone number","Link") /* Chooses a phone number from the contact list */,
    Member("save phone number",List("String"),"Nothing") /* Allows the user to save the phone number */,
    Member("save contact",List("Contact"),"Nothing") /* [**obsolete**] Obsolete, use social->save contact instead */,
    Member("vibrate",List("Number"),"Nothing") /* Vibrates the phone for ... seconds (0.02 minimum) */,
    Member("choose address","Link") /* Chooses an address from the contacts */,
    Member("power source","String") /* Indicates if the phone is on 'battery' or 'external' power source. */
  ))

  // A picture
  addType("Picture", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("count","Number") /* Gets the number of pixels */,
    Member("date","DateTime") /* Gets the date time where the picture was taken; if any. */,
    Member("height","Number") /* Gets the height in pixels */,
    Member("equals",List("Picture"),"Nothing") /* Checks if the picture is the same instance as the other picture. This action does not check that pixels are the same between two different pictures. */,
    Member("is panorama","Boolean") /* Indicates if the picture width is greater than its height */,
    Member("location","Location") /* Gets the location where the picture was taken; if any. */,
    Member("width","Number") /* Gets the width in pixels */,
    Member("update on wall","Nothing") /* Refreshes the picture on the wall */,
    Member("at index",List("Number"),"Color") /* ONLY INSIDE SAMPLE: an accessor which is always number based */,
    Member("copy","Picture") /* ONLY INSIDE SAMPLE: cloning a collection*/,
    Member("at",List("Number"),"Color") /* Gets the pixel color at the given linear index */,
    Member("blend",List("Picture","Number","Number","Number","Number"),"Nothing") /* Writes another picture at a given location. The opacity ranges from 0 (transparent) to 1 (opaque). */,
    Member("clone","Picture") /* Returns a copy of the image */,
    Member("fill rect",List("Number","Number","Number","Number","Number","Color"),"Nothing") /* Fills a rectangle with a given color */,
    Member("pixel",List("Number","Number"),"Color") /* Gets the pixel color */,
    Member("resize",List("Number","Number"),"Nothing") /* Resizes the picture to the given size in pixels */,
    Member("save to library","String") /* Saves the picture and returns the file name if successful. */,
    Member("clear",List("Color"),"Nothing") /* Clears the picture to a given color */,
    Member("colorize",List("Color","Color","Number"),"Nothing") /* Recolors the picture with the background and foreground color, based on a color threshold between 0.0 and 1.0 */,
    Member("negative","Nothing") /* Inverts the colors in the picture */,
    Member("desaturate","Nothing") /* Makes picture monochromatic (black and white) */,
    Member("invert","Nothing") /* Inverts the red, blue and green channels */,
    Member("tint",List("Color"),"Nothing") /* Converts every pixel to gray and tints it with the given color. */,
    Member("brightness",List("Number"),"Nothing") /* Changes the brightness of the picture. factor in [-1, 1]. */,
    Member("contrast",List("Number"),"Nothing") /* Changes the contrast of the picture. factor in [-1, 1]. */,
    Member("crop",List("Number","Number","Number","Number"),"Nothing") /* Crops a sub-image */,
    Member("draw ellipse",List("Number","Number","Number","Number","Number","Color","Number"),"Nothing") /* Draws an elliptic border with a given color */,
    Member("draw line",List("Number","Number","Number","Number","Color","Number"),"Nothing") /* Draws a line between two points */,
    Member("draw rect",List("Number","Number","Number","Number","Number","Color","Number"),"Nothing") /* Draws a rectangle border with a given color */,
    Member("draw text",List("Number","Number","String","Number","Number","Color"),"Nothing") /* Draws some text border with a given color and font size */,
    Member("fill ellipse",List("Number","Number","Number","Number","Number","Color"),"Nothing") /* Fills a ellipse with a given color */,
    Member("set pixel",List("Number","Number","Color"),"Nothing") /* Sets the pixel color at a given pixel */,
    Member("to buffer","Buffer") /* Copy all pixels from the picture */,
    Member("write buffer",List("Buffer"),"Nothing") /* Copy pixels from `buffer` to the picture */,
    Member("share",List("String","String"),"Nothing") /* Shares this message ('' to pick from a list) */,
    Member("flip horizontal","Nothing") /* Flips the picture horizontally */,
    Member("flip vertical","Nothing") /* Flips the picture vertically */,
    Member("to data uri",List("Number"),"String") /* Encodes the image into a data uri using the desired quality (1 best, 0 worst). If the quality value is 1, the image is encoded as PNG, otherwise JPEG. */,
    Member("blend svg",List("String","Number","Number","Number","Number","Number"),"Nothing") /* Writes an Scalable Vector Graphics (SVG) document at a given location. By default, this action uses the viewport size provided in the SVG document when width or height are negative. */,
    Member("post to wall","Nothing") /* Displays the image to the wall; you need to call 'update on wall' later if you want changes to be reflected. */
  ))

  // A picture album
  addType("Picture Album", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("albums","Picture Albums") /* Gets the children albums */,
    Member("name","String") /* Gets the name of the album */,
    Member("pictures","Pictures") /* Gets the pictures */,
    Member("post to wall","Nothing") /* Displays the album to the wall */
  ))

  // A collection of picture albums
  addType("Picture Albums", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("at index",List("Number"),"Picture Album") /* ONLY INSIDE SAMPLE: an accessor which is always number based */,
    Member("copy","Picture Albums") /* ONLY INSIDE SAMPLE: cloning a collection*/,
    Member("at",List("Number"),"Picture Album") /* Gets the item at position 'index'; invalid if index is out of bounds */,
    Member("random","Picture Album") /* Gets a random item; invalid if collection is empty */,
    Member("count","Number") /* Gets the number of elements in the collection */,
    Member("post to wall","Nothing") /* Displays the value to the wall */
  ))

  // A collection of pictures
  addType("Pictures", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("at index",List("Number"),"Picture") /* ONLY INSIDE SAMPLE: an accessor which is always number based */,
    Member("copy","Pictures") /* ONLY INSIDE SAMPLE: cloning a collection*/,
    Member("at",List("Number"),"Picture") /* Gets the picture at position 'index'; invalid if index is out of bounds */,
    Member("random","Picture") /* Gets a random picture; invalid if collection is empty */,
    Member("count","Number") /* Gets the number of elements in the collection */,
    Member("find",List("String"),"Number") /* Finds a picture by name and returns the index. Returns -1 if not found. */,
    Member("post to wall","Nothing") /* Displays the picture thumbmails to the wall */,
    Member("full",List("Number"),"Picture") /* Gets the full resolution of i-th picture. */,
    Member("thumbnail",List("Number"),"Picture") /* Gets the thumbnail of i-th picture. */,
    Member("rand","Picture") /* Renamed to 'random' */
  ))

  // A named location
  addType("Place", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("location","Location") /* Gets the location of the place */,
    Member("set location",List("Location"),"Nothing") /* Sets the location of the place */,
    Member("id","String") /* Gets the identifier of this place */,
    Member("set id",List("String"),"Nothing") /* Sets the identifier of this place */,
    Member("name","String") /* Gets the name of the place */,
    Member("set name",List("String"),"Nothing") /* Sets the name of the place */,
    Member("picture link","String") /* Gets a url to the picture */,
    Member("set picture link",List("String"),"Nothing") /* Sets the url to the picture */,
    Member("link","String") /* Gets the link associated to the message */,
    Member("set link",List("String"),"Nothing") /* Sets the link associated to the place */,
    Member("category","String") /* Gets the category of the place */,
    Member("set category",List("String"),"Nothing") /* Sets the category of the place */,
    Member("source","String") /* Gets the source of this place */,
    Member("set source",List("String"),"Nothing") /* Sets the source of this place */,
    Member("values","String Map") /* Gets the additional values stored in the place */,
    Member("to string","String") /* Converts to a string name,lat,long */,
    Member("check in","Nothing") /* [**not implemented**] [**obsolete**] Checks into the place (supported for Facebook) */,
    Member("post to wall","Nothing") /* Posts the place to the wall */
  ))

  // A collection of places
  addType("Place Collection", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("continuation","String") /* Gets the identifier of the next set of messages */,
    Member("set continuation",List("String"),"Nothing") /* Sets the identifier of the next set of messages */,
    Member("count","Number") /* Gets the number of elements */,
    Member("clear","Nothing") /* Clears the collection */,
    Member("add",List("Place"),"Nothing") /* Adds a place */,
    Member("add many",List("Place Collection"),"Nothing") /* Adds many places at once */,
    Member("index of",List("Place","Number"),"Number") /* Gets the index of the first occurence of item. Returns -1 if not found or start is out of range. */,
    Member("at index",List("Number"),"Place") /* ONLY INSIDE SAMPLE: an accessor which is always number based */,
    Member("copy","Place Collection") /* ONLY INSIDE SAMPLE: cloning a collection*/,
    Member("at",List("Number"),"Place") /* Gets the i-th place */,
    Member("remove",List("Place"),"Boolean") /* Removes the first occurence of a place. Returns true if removed. */,
    Member("remove at",List("Number"),"Nothing") /* Removes the location at position index. */,
    Member("reverse","Nothing") /* Reverses the order of the elements. */,
    Member("random","Place") /* Gets a random element from the collection. Returns invalid if the collection is empty. */,
    Member("set at",List("Number","Place"),"Nothing") /* Sets the i-th place */,
    Member("insert at",List("Number","Place"),"Nothing") /* Inserts a place at position index. Does nothing if index is out of range. */,
    Member("post to wall","Nothing") /* Posts the places on the wall */,
    Member("sort by distance",List("Location"),"Nothing") /* Sorts the places by distance to the location */
  ))

  // Play, stop or resume songs, ...
  addSingleton("Player", List( 
    Member("active song","Song") /* Gets the active song if any */,
    Member("next","Nothing") /* Moves to the next song in the queue of playing songs */,
    Member("previous","Nothing") /* Moves to the previous song in the queue of playing songs */,
    Member("pause","Nothing") /* Pauses the currently playing song */,
    Member("play",List("Song"),"Nothing") /* Plays a Song */,
    Member("play many",List("Songs"),"Nothing") /* Plays a collection of songs */,
    Member("play position","Number") /* Gets the position in seconds whithin the active song */,
    Member("resume","Nothing") /* Resumes a paused song */,
    Member("stop","Nothing") /* Stops playing a song */,
    Member("is muted","Boolean") /* Indicates if the player is muted */,
    Member("sound volume","Number") /* [**not implemented**] Gets the sound volume for sounds from 0 (silent) to 1 (current volume) */,
    Member("set sound volume",List("Number"),"Nothing") /* [**not implemented**] Sets the sound volume level from 0 (silent) to 1 (current volume) */,
    Member("is repeating","Boolean") /* Indicates if the player is repeating */,
    Member("set repeating",List("Boolean"),"Nothing") /* Sets the repeating on and off */,
    Member("is shuffled","Boolean") /* Indicates if the player is shuffled */,
    Member("set shuffled",List("Boolean"),"Nothing") /* Sets the shuffling on and off */,
    Member("is stopped","Boolean") /* Indicates if the player is stopped */,
    Member("is playing","Boolean") /* Indicates if the player is playing a song */,
    Member("is paused","Boolean") /* Indicates if the player is paused */,
    Member("play home media",List("Media Link"),"Nothing") /* Plays an audio/video file from the home network */,
    Member("volume","Number") /* [**obsolete**] Volume is no longer supported. */
  ))

  // A song playlist
  addType("Playlist", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("duration","Number") /* [**not implemented**] Gets the duration in seconds */,
    Member("name","String") /* [**not implemented**] Gets the name of the song */,
    Member("songs","Songs") /* [**not implemented**] Gets the songs */,
    Member("post to wall","Nothing") /* [**not implemented**] Displays the playlist to the wall */,
    Member("play","Nothing") /* [**not implemented**] Plays the songs in the playlist */
  ))

  // A collection of playlists
  addType("Playlists", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("count","Number") /* [**not implemented**] Gets the number of playlists */,
    Member("at index",List("Number"),"Playlist") /* ONLY INSIDE SAMPLE: an accessor which is always number based */,
    Member("copy","Playlists") /* ONLY INSIDE SAMPLE: cloning a collection*/,
    Member("at",List("Number"),"Playlist") /* [**not implemented**] Gets i-th playlist */,
    Member("post to wall","Nothing") /* [**not implemented**] Displays the value to the wall */
  ))

  // A printer on the home network
  addType("Printer", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("device","Device") /* [**not implemented**] Gets the detailled information about this device */,
    Member("name","String") /* [**not implemented**] Gets the name of the printer */,
    Member("post to wall","Nothing") /* [**not implemented**] Display the printer to the wall */,
    Member("print text",List("String"),"Nothing") /* [**not implemented**] Queues a job to print the text. */,
    Member("is idle","Boolean") /* [**not implemented**] Indicates if new jobs can start processing immediately without waiting. */,
    Member("is processing","Boolean") /* [**not implemented**] Indicates if jobs are processing; new jobs will wait before processing, i.e., are said to be pending. */,
    Member("is stopped","Boolean") /* [**not implemented**] Indicates if no jobs can be processed and intervention is needed. */,
    Member("state reason","String") /* [**not implemented**] Indicates additional information about why the Printer is in its current state. */
  ))

  // A collection of printers
  addType("Printer Collection", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("count","Number") /* [**not implemented**] Gets the number of printers */,
    Member("clear","Nothing") /* [**not implemented**] [**obsolete**] Clears the printers */,
    Member("add",List("Printer"),"Nothing") /* [**not implemented**] [**obsolete**] Adds a printer to the collection */,
    Member("at index",List("Number"),"Printer") /* ONLY INSIDE SAMPLE: an accessor which is always number based */,
    Member("copy","Printer Collection") /* ONLY INSIDE SAMPLE: cloning a collection*/,
    Member("at",List("Number"),"Printer") /* [**not implemented**] Gets the printer at index */,
    Member("post to wall","Nothing") /* [**not implemented**] Posts the printers on the wall */
  ))

  // Access to the radio
  addSingleton("Radio", List( 
    Member("is playing","Boolean") /* Indicates if the radio is on */,
    Member("start","Nothing") /* Turns on the radio */,
    Member("stop","Nothing") /* Turns off the radio */,
    Member("signal strength","Number") /* Gets the signal strength */,
    Member("frequency","Number") /* Gets the frequency */,
    Member("set frequency",List("Number"),"Nothing") /* Sets the frequency */,
    Member("link frequency",List("String","Number"),"Link") /* Creates a link to a radio frequency */
  ))

  // Camera, location, microphone and other sensors
  addSingleton("Senses", List( 
    Member("take camera picture","Picture") /* Takes a picture and returns it. This picture does not contain the gps location. */,
    Member("record microphone","Sound") /* Records audio using the microphone */,
    Member("is device stable","Boolean") /* Indicates whether the device is 'stable' (no movement for about 0.5 seconds) */,
    Member("has accelerometer","Boolean") /* [**obsolete**] Test if the senses→acceleration quick is invalid instead */,
    Member("acceleration stable","Vector3") /* Gets filtered and temporally averaged accelerometer data using an arithmetic mean of the last 25 'optimally filtered' samples, so over 500ms at 50Hz on each axis, to virtually eliminate most sensor noise. This provides a very stable reading but it has also a very high latency and cannot be used for rapidly reacting UI. */,
    Member("acceleration smooth","Vector3") /* Gets filtered accelerometer data using a 1 Hz first-order low-pass on each axis to eliminate the main sensor noise while providing a medium latency. This can be used for moderately reacting UI updates requiring a very smooth signal. */,
    Member("acceleration quick","Vector3") /* Gets filtered accelerometer data using a combination of a low-pass and threshold triggered high-pass on each axis to eliminate the majority of the sensor low amplitude noise while trending very quickly to large offsets (not perfectly smooth signal in that case), providing a very low latency. This is ideal for quickly reacting UI updates. */,
    Member("current location","Location") /* Gets the current approximate phone location. The phone optimizes the accuracy for power, performance, and other cost considerations. */,
    Member("current location accurate","Location") /* Gets the current phone location with the most accuracy. This includes using services that might charge money, or consuming higher levels of battery power or connection bandwidth. */,
    Member("camera","Camera") /* Gets the primary camera if available */,
    Member("front camera","Camera") /* Gets the front facing camera if available */,
    Member("has front camera","Boolean") /* [**obsolete**] Test if the senses→front camera is invalid instead */,
    Member("has motion","Boolean") /* [**not implemented**] [**obsolete**] Test if the senses→motion is invalid instead. */,
    Member("motion","Motion") /* [**not implemented**] Gets the current motion that combines data from the accelerometer, compass and gyroscope if available. */,
    Member("orientation","Vector3") /* Gets the current orientation in degrees if available. (x,y,z) is also called (pitch, roll, yaw) or (alpha, beta, gamma). */,
    Member("has compass","Boolean") /* [**obsolete**] Test if the senses→heading is invalid instead */,
    Member("heading","Number") /* Gets the compass heading, in degrees, measured clockwise from the Earth’s geographic north. */,
    Member("has gyroscope","Boolean") /* Indicates if the gyroscope is available on the device */,
    Member("rotation speed","Vector3") /* Gets the gyroscope rotational velocity around each axis of the device, in degrees per second. */,
    Member("battery level","Number") /* Gets the charge level of the battery between 0 (discharged) and 1 (fully charged). Returns invalid if this information is not available. */,
    Member("bluetooth devices","Bluetooth Device Collection") /* Get the list of Bluetooth widgets paired with your device. */
  ))

  // Emails, sms, contacts, calendar, ...
  addSingleton("Social", List( 
    Member("send email",List("String","String","String"),"Nothing") /* Opens the mail client */,
    Member("save email",List("String"),"Nothing") /* Allows the user to save the email address (email) */,
    Member("save contact",List("Contact"),"Nothing") /* Saves a new contact */,
    Member("send sms",List("String","String"),"Nothing") /* Opens the short message client (to, body) */,
    Member("link phone number",List("String"),"Link") /* Creates a link from a phone number */,
    Member("link email",List("String"),"Link") /* Creates a link from an email */,
    Member("create message",List("String"),"Message") /* Creates a message to share */,
    Member("create place",List("String","Location"),"Place") /* Creates a place */,
    Member("search",List("String","String"),"Message Collection") /* [**obsolete**] Searches for recent messages in a social network (twitter, facebook) */,
    Member("search places nearby",List("String","String","Location","Number"),"Place Collection") /* [**not implemented**] [**obsolete**] Searches for places nearby. The distance is in meters. */,
    Member("contacts",List("String"),"Contact Collection") /* Retrieves the list of contacts */,
    Member("search contacts",List("String"),"Contact Collection") /* Searches for contacts by name. */,
    Member("choose email","Link") /* Chooses an email from the contact list */,
    Member("choose contact","Contact") /* Chooses a contact from the contact list */,
    Member("search appointments",List("DateTime","DateTime"),"Appointment Collection") /* Searches for appointments in a given time range */,
    Member("create contact",List("String"),"Contact") /* Creates a new contact */
  ))

  // A song
  addType("Song", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("album","Song Album") /* Gets the song album containing the song */,
    Member("artist","String") /* Gets the name of the artist */,
    Member("duration","Number") /* Gets the duration in seconds */,
    Member("genre","String") /* Gets the genre of the song */,
    Member("name","String") /* Gets the name of the song */,
    Member("play count","Number") /* Gets the play count */,
    Member("rating","Number") /* Gets the users rating. -1 if not rated. */,
    Member("track","Number") /* Gets the track number in the album */,
    Member("play","Nothing") /* Plays the song. */,
    Member("protected","Boolean") /* [**not implemented**] Gets a value whether the song is DRM protected */,
    Member("post to wall","Nothing") /* Displays the song on the wall */
  ))

  // A song album
  addType("Song Album", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("art","Picture") /* Gets album art picture */,
    Member("artist","String") /* Gets the name of the artist */,
    Member("duration","Number") /* Gets the duration in seconds */,
    Member("genre","String") /* Gets the genre of the song */,
    Member("has art","Boolean") /* Indicates if the album has art */,
    Member("name","String") /* Gets the name of the album */,
    Member("post to wall","Nothing") /* Displays the song album on the wall */,
    Member("songs","Songs") /* Gets the songs */,
    Member("thumbnail","Picture") /* Gets the thumbnail picture */,
    Member("play","Nothing") /* Plays the songs of the album */
  ))

  // A collection of albums
  addType("Song Albums", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("at index",List("Number"),"Song Album") /* ONLY INSIDE SAMPLE: an accessor which is always number based */,
    Member("copy","Song Albums") /* ONLY INSIDE SAMPLE: cloning a collection*/,
    Member("at",List("Number"),"Song Album") /* Gets the item at position 'index'; invalid if index is out of bounds */,
    Member("random","Song Album") /* Gets a random item; invalid if collection is empty */,
    Member("count","Number") /* Gets the number of elements in the collection */,
    Member("post to wall","Nothing") /* Displays the albums to the wall */
  ))

  // A collection of songs
  addType("Songs", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("at index",List("Number"),"Song") /* ONLY INSIDE SAMPLE: an accessor which is always number based */,
    Member("copy","Songs") /* ONLY INSIDE SAMPLE: cloning a collection*/,
    Member("at",List("Number"),"Song") /* Gets the item at position 'index'; invalid if index is out of bounds */,
    Member("random","Song") /* Gets a random item; invalid if collection is empty */,
    Member("count","Number") /* Gets the number of elements in the collection */,
    Member("play","Nothing") /* Plays the song. */,
    Member("post to wall","Nothing") /* Displays the songs on the wall */,
    Member("rand","Song") /* Renamed to 'random' */
  ))

  // A sound effect
  addType("Sound", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("pan","Number") /* Gets the panning, ranging from -1.0 (full left) to 1.0 (full right). */,
    Member("set pan",List("Number"),"Nothing") /* Sets the panning, ranging from -1.0 (full left) to 1.0 (full right). */,
    Member("pitch","Number") /* Gets the pitch adjustment, ranging from -1 (down one octave) to 1 (up one octave). */,
    Member("set pitch",List("Number"),"Nothing") /* Sets the pitch adjustment, ranging from -1 (down one octave) to 1 (up one octave). */,
    Member("volume","Number") /* Gets the volume from 0 (silent) to 1 (full volume) */,
    Member("set volume",List("Number"),"Nothing") /* Sets the volume from 0 (silent) to 1 (full volume). */,
    Member("duration","Number") /* Gets the duration in seconds. */,
    Member("pause","Nothing") /* [**obsolete**] Not supported anymore */,
    Member("play","Nothing") /* Plays the sound effect */,
    Member("play special",List("Number","Number","Number"),"Nothing") /* Plays the song with different volume (0 to 1), pitch (-1 to 1) and pan (-1 to 1). */,
    Member("post to wall","Nothing") /* Displays a player on the wall */,
    Member("resume","Nothing") /* [**obsolete**] Not supported anymore */,
    Member("state","String") /* [**obsolete**] Not supported anymore */,
    Member("stop","Nothing") /* [**obsolete**] Not supported anymore */
  ))

  // A spring between two sprites.
  addType("Spring", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */
  ))

  // A sprite
  addType("Sprite", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("friction","Number") /* Gets the fraction of speed loss between 0 and 1 */,
    Member("set friction",List("Number"),"Nothing") /* Sets the friction to a fraction of speed loss between 0 and 1 */,
    Member("angular speed","Number") /* Gets the rotation speed in degrees/sec */,
    Member("set angular speed",List("Number"),"Nothing") /* Sets the rotation speed in degrees/sec */,
    Member("height","Number") /* Gets the height in pixels */,
    Member("location","Location") /* Gets the geo location assigned to the sprite */,
    Member("set location",List("Location"),"Nothing") /* Sets the geo location of the sprite */,
    Member("angle","Number") /* Gets the angle of the sprite in degrees */,
    Member("set angle",List("Number"),"Nothing") /* Sets the angle of the sprite in degrees */,
    Member("elasticity","Number") /* Gets the sprite elasticity as a fraction of speed preservation per bounce (0-1) */,
    Member("set elasticity",List("Number"),"Nothing") /* Sets the sprite elasticity as a fraction of speed preservation per bounce (0-1) */,
    Member("speed x","Number") /* Gets the speed along x in pixels/sec */,
    Member("set speed x",List("Number"),"Nothing") /* Sets the x speed in pixels/sec */,
    Member("speed y","Number") /* Gets the speed along y in pixels/sec */,
    Member("set speed y",List("Number"),"Nothing") /* Sets the y speed in pixels/sec */,
    Member("width","Number") /* Gets the width in pixels */,
    Member("set height",List("Number"),"Nothing") /* Sets the height in pixels */,
    Member("set width",List("Number"),"Nothing") /* Sets the width in pixels */,
    Member("x","Number") /* Gets the x position in pixels */,
    Member("set x",List("Number"),"Nothing") /* Sets the x position in pixels */,
    Member("y","Number") /* Gets the y position in pixels */,
    Member("set y",List("Number"),"Nothing") /* Sets the y position in pixels */,
    Member("color","Color") /* Returns the sprite color. */,
    Member("set color",List("Color"),"Nothing") /* Sets the sprite color. */,
    Member("opacity","Number") /* Gets the opacity (between 0 transparent and 1 opaque) */,
    Member("set opacity",List("Number"),"Nothing") /* Sets the sprite opacity (between 0 transparent and 1 opaque). */,
    Member("text","String") /* The text on a text sprite (if it is a text sprite) */,
    Member("set text",List("String"),"Nothing") /* Updates text on a text sprite (if it is a text sprite) */,
    Member("mass","Number") /* Gets the mass */,
    Member("set mass",List("Number"),"Nothing") /* Sets the sprite mass. */,
    Member("acceleration x","Number") /* Gets the acceleration along x in pixels/sec^2 */,
    Member("acceleration y","Number") /* Gets the acceleration along y in pixels/sec^2 */,
    Member("set acceleration x",List("Number"),"Nothing") /* Sets the x acceleration in pixels/sec^2 */,
    Member("set acceleration y",List("Number"),"Nothing") /* Sets the y acceleration in pixels/sec^2 */,
    Member("set acceleration",List("Number","Number"),"Nothing") /* Sets the acceleration in pixels/sec^2 */,
    Member("on tap",List("Position Action"),"Nothing") /* Set the handler invoked when the sprite is tapped */,
    Member("on swipe",List("Vector Action"),"Nothing") /* Set the handler invoked when the sprite is swiped */,
    Member("on drag",List("Vector Action"),"Nothing") /* Set the handler invoked when the sprite is dragged */,
    Member("on touch down",List("Position Action"),"Nothing") /* Set the handler invoked when the sprite is touched initially */,
    Member("on touch up",List("Position Action"),"Nothing") /* Set the handler invoked when the sprite touch is released */,
    Member("hide","Nothing") /* Hide sprite. */,
    Member("is visible","Boolean") /* Returns true if sprite is not hidden */,
    Member("move",List("Number","Number"),"Nothing") /* Moves sprite. */,
    Member("move towards",List("Sprite","Number"),"Nothing") /* Moves sprite towards other sprite. */,
    Member("overlaps with",List("Sprite"),"Boolean") /* Do the sprites overlap */,
    Member("overlap with",List("Sprite Set"),"Sprite Set") /* Returns the subset of sprites in the given set that overlap with sprite. */,
    Member("equals",List("Sprite"),"Boolean") /* Are these the same sprite */,
    Member("set picture",List("Picture"),"Nothing") /* Updates picture on a picture sprite (if it is a picture sprite) */,
    Member("picture","Picture") /* The picture on a picture sprite (if it is a picture sprite) */,
    Member("set pos",List("Number","Number"),"Nothing") /* Sets the position in pixels */,
    Member("set speed",List("Number","Number"),"Nothing") /* Sets the speed in pixels/sec */,
    Member("show","Nothing") /* Show sprite. */,
    Member("speed towards",List("Sprite","Number"),"Nothing") /* Sets sprite speed direction towards other sprite with given magnitude. */,
    Member("set clip",List("Number","Number","Number","Number"),"Nothing") /* Sets the clipping area for an image sprite (if it is an image sprite) */,
    Member("move clip",List("Number","Number"),"Nothing") /* Moves the clipping area and wraps around the image if needed (if it is an image sprite) */,
    Member("delete","Nothing") /* Delete sprite. */,
    Member("is deleted","Boolean") /* True if sprite is deleted. */,
    Member("z index","Number") /* Gets the z-index of the sprite */,
    Member("set z index",List("Number"),"Nothing") /* Sets the z-index of the sprite */
  ))

  // A collection of sprites
  addType("Sprite Set", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("clear","Nothing") /* Removes all sprites from the set. */,
    Member("count","Number") /* Returns the number of sprites in the set */,
    Member("add",List("Sprite"),"Boolean") /* Add sprite to set. Returns true if sprite was not already in set. */,
    Member("add from",List("Sprite Set","Sprite"),"Boolean") /* Add sprite to set and remove from old set. Returns true if sprite was in old set and not in new set. */,
    Member("remove",List("Sprite"),"Boolean") /* Remove sprite from set. Returns true if sprite was in set. */,
    Member("contains",List("Sprite"),"Boolean") /* Returns true if sprite is in set. */,
    Member("remove first","Sprite") /* Remove sprite that was added to set first. */,
    Member("index of",List("Sprite"),"Number") /* Returns index of sprite in this set or -1 if not in set. */,
    Member("at index",List("Number"),"Sprite") /* ONLY INSIDE SAMPLE: an accessor which is always number based */,
    Member("copy","Sprite Set") /* ONLY INSIDE SAMPLE: cloning a collection*/,
    Member("at",List("Number"),"Sprite") /* Return sprite at given index. */
  ))

  // A piece of text
  addType("String", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("split",List("String"),"String Collection") /* Returns a string collection that contains the substrings in this string that are delimited by elements of a specified string. */,
    Member("post to wall","Nothing") /* Displays string on the wall */,
    Member("count","Number") /* Returns the number of characters */,
    Member("at index",List("Number"),"String") /* ONLY INSIDE SAMPLE: an accessor which is always number based */,
    Member("copy","String") /* ONLY INSIDE SAMPLE: cloning a collection*/,
    Member("at",List("Number"),"String") /* Gets the character at a specified index */,
    Member("to lower case","String") /* Returns a copy of this string converted to lowercase, using the casing rules of the current culture. */,
    Member("to upper case","String") /* Returns a copy of this string converted to uppercase, using the casing rules of the current culture. */,
    Member("to unicode","Number") /* Converts a single character string into its unicode number */,
    Member("compare",List("String"),"Number") /* Compares two pieces of text */,
    Member("concat",List("String"),"String") /* Concatenates two pieces of text */,
    Member("∥",List("String"),"String") /* Concatenates two pieces of text */,
    Member("contains",List("String"),"Boolean") /* Returns a value indicating if the second string is contained */,
    Member("equals",List("String"),"Boolean") /* Checks if two strings are the same */,
    Member("ends with",List("String"),"Boolean") /* Determines whether the ending matches the specified string */,
    Member("index of",List("String","Number"),"Number") /* Returns the index of the first occurence if found starting at a given position */,
    Member("insert",List("Number","String"),"String") /* Inserts a string at a given position */,
    Member("is empty","Boolean") /* Indicates if the string is empty */,
    Member("is match regex",List("String"),"Boolean") /* Indicates if the string matches a regular expression */,
    Member("last index of",List("String","Number"),"Number") /* Returns the index of the last occurence if found starting at a given position */,
    Member("match",List("String"),"String Collection") /* Gets the groups from the matching the regex expression (pattern) */,
    Member("matches",List("String"),"String Collection") /* Gets the strings matching the regex expression (pattern) */,
    Member("remove",List("Number"),"String") /* Returns the string with characters removed starting at a given index */,
    Member("replace",List("String","String"),"String") /* Returns a given string with a replacement */,
    Member("replace regex",List("String","String"),"String") /* Replace every match of the regex according to the replacement string */,
    Member("starts with",List("String"),"Boolean") /* Determines whether the beginning matches the specified string */,
    Member("substring",List("Number","Number"),"String") /* Returns a substring given a start index and a length */,
    Member("trim",List("String"),"String") /* Removes all leading and trailing occurrences of a set of characters specified in a string from the current string. */,
    Member("trim start",List("String"),"String") /* Removes all leading occurrences of a set of characters specified in a string from the current string. */,
    Member("trim end",List("String"),"String") /* Removes all trailing occurrences of a set of characters specified in a string from the current string. */,
    Member("to time","Number") /* Parses the string as a time (12:30:12) and returns the number of seconds. */,
    Member("to number","Number") /* Parses the string as a number */,
    Member("to boolean","Boolean") /* Parses the string as a boolean */,
    Member("to location","Location") /* Parses the string as a geo coordinate. */,
    Member("share",List("String"),"Nothing") /* Shares the string (email, sms, facebook, social or '' to pick from a list) */,
    Member("copy to clipboard","Nothing") /* Stores text in the clipboard */,
    Member("to datetime","DateTime") /* Parses the string as a date and time. */,
    Member("to color","Color") /* Parses the string as a color. */,
    Member("to json","Json Object") /* Converts the value into a json data structure. */
  ))

  // A collection of strings
  addType("String Collection", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("count","Number") /* Gets the number of strings */,
    Member("clear","Nothing") /* Clears the strings */,
    Member("add",List("String"),"Nothing") /* Adds a string */,
    Member("add many",List("String Collection"),"Nothing") /* Adds many strings at once */,
    Member("index of",List("String","Number"),"Number") /* Gets the index of the first occurence of a string. Returns -1 if not found or start is out of range. */,
    Member("at index",List("Number"),"String") /* ONLY INSIDE SAMPLE: an accessor which is always number based */,
    Member("copy","String Collection") /* ONLY INSIDE SAMPLE: cloning a collection*/,
    Member("at",List("Number"),"String") /* Gets the string at position index. Returns invalid if index is out of range */,
    Member("remove",List("String"),"Boolean") /* Removes the first occurence of a string. Returns true if removed. */,
    Member("remove at",List("Number"),"Nothing") /* Removes the string at position index. */,
    Member("reverse","Nothing") /* Reverses the items */,
    Member("random","String") /* Gets a random element from the collection. Returns invalid if the collection is empty. */,
    Member("set at",List("Number","String"),"Nothing") /* Sets the string at position index. Does nothing if the index is out of range. */,
    Member("insert at",List("Number","String"),"Nothing") /* Inserts a string at position index. Does nothing if index is out of range. */,
    Member("join",List("String"),"String") /* Concatenates the separator and items into a string */,
    Member("contains",List("String"),"Boolean") /* Indicates if the collection contains the item */,
    Member("sort","Nothing") /* Sorts the strings in this collection */,
    Member("share",List("String"),"Nothing") /* Shares the content (email, sms, social) */,
    Member("post to wall","Nothing") /* Displays the string on the wall */
  ))

  // A map from strings to strings
  addType("String Map", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("count","Number") /* Gets the number of elements in the map */,
    Member("keys","String Collection") /* Gets the keys in the map */,
    Member("at index",List("Number"),"String") /* ONLY INSIDE SAMPLE: an accessor which is always number based */,
    Member("copy","String Map") /* ONLY INSIDE SAMPLE: cloning a collection*/,
    Member("at",List("String"),"String") /* Gets the value at a given key; invalid if not found */,
    Member("set at",List("String","String"),"Nothing") /* Sets the value at a given key; invalid if not found */,
    Member("clear","Nothing") /* Clears the values from the map */,
    Member("set many",List("String Map"),"Nothing") /* Sets many elements at once. */,
    Member("remove",List("String"),"Nothing") /* Removes the value at a given key */,
    Member("post to wall","Nothing") /* Displays the list of key,value pairs in a table */
  ))

  // 2D barcodes, QR codes and NFC tags
  addSingleton("Tags", List( 
    Member("nfc receive",List("String"),"String") /* Receives text through NFC. `type` may also be a mime type. */,
    Member("nfc receive picture","Picture") /* Receives a picture through NFC. */,
    Member("nfc send",List("String","String"),"Nothing") /* Sends a url, text or any other text format using NFC. `type` may be a mime type. */,
    Member("nfc send picture",List("Picture"),"Nothing") /* Sends a url, text or any other format using NFC. `type` may be a mime type. */,
    Member("nfc write tag",List("String","String"),"Nothing") /* Writes a static NFC tag with url, text or any other format. `type` may be a mime type. */,
    Member("tag url",List("String","Number","Boolean"),"Picture") /* Generates a 2D barcode pointing to the url using Microsoft Tag. url must be less than 1000 character long and size must be between 0.75 and 5 inches. */,
    Member("tag text",List("String","Number","Boolean"),"Picture") /* Generates a 2D barcode pointing to the text using Microsoft Tag. text must be less than 1000 character long and size must be between 0.75 and 5 inches. */,
    Member("scan","String") /* [**not implemented**] [**dbg**] Scans an id tag created by TouchDevelop and returns the embeded text. */
  ))

  // A task created with `async` keyword
  addType("Task", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("completed","Boolean") /* Check if the task is done yet */
  ))

  // A text box
  addType("TextBox", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("text","String") /* Gets the text */,
    Member("set text",List("String"),"Nothing") /* Sets the text */,
    Member("icon","Picture") /* Gets the icon picture (max 173x173) */,
    Member("set icon",List("Picture"),"Nothing") /* Sets the icon picture (max 96 x 96) */,
    Member("font size","Number") /* Gets the font size */,
    Member("set font size",List("Number"),"Nothing") /* Sets the font size (small = 14, normal = 15, medium = 17, medium large = 19, large = 24, extra large = 32, extra extra large = 54, huge = 140 */,
    Member("background","Color") /* Gets the background color */,
    Member("set background",List("Color"),"Nothing") /* Sets the background color */,
    Member("foreground","Color") /* Gets the foreground color */,
    Member("set foreground",List("Color"),"Nothing") /* Sets the foreground color */,
    Member("border","Color") /* Gets the border color */,
    Member("set border",List("Color"),"Nothing") /* Sets the border color */,
    Member("post to wall","Nothing") /* Posts the textbox to the wall */
  ))

  // This type is no longer supported. See [](/tiles) for more information.
  addType("Tile", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("title","String") /* [**obsolete**] This action is no longer supported. See [](/tiles) for more information. */,
    Member("set title",List("String"),"Nothing") /* [**obsolete**] This action is no longer supported. See [](/tiles) for more information. */,
    Member("back title","String") /* [**obsolete**] This action is no longer supported. See [](/tiles) for more information. */,
    Member("set back title",List("String"),"Nothing") /* [**obsolete**] This action is no longer supported. See [](/tiles) for more information. */,
    Member("background","Color") /* [**obsolete**] This action is no longer supported. See [](/tiles) for more information. */,
    Member("set background",List("Color"),"Nothing") /* [**obsolete**] This action is no longer supported. See [](/tiles) for more information. */,
    Member("back icon","Picture") /* [**obsolete**] This action is no longer supported. See [](/tiles) for more information. */,
    Member("set back icon",List("Picture"),"Nothing") /* [**obsolete**] This action is no longer supported. See [](/tiles) for more information. */,
    Member("content","String") /* [**obsolete**] This action is no longer supported. See [](/tiles) for more information. */,
    Member("set content",List("String"),"Nothing") /* [**obsolete**] This action is no longer supported. See [](/tiles) for more information. */,
    Member("counter","Number") /* [**obsolete**] This action is no longer supported. See [](/tiles) for more information. */,
    Member("set counter",List("Number"),"Nothing") /* [**obsolete**] This action is no longer supported. See [](/tiles) for more information. */,
    Member("icon","Picture") /* [**obsolete**] This action is no longer supported. See [](/tiles) for more information. */,
    Member("set icon",List("Picture"),"Nothing") /* [**obsolete**] This action is no longer supported. See [](/tiles) for more information. */,
    Member("panorama","Boolean") /* [**obsolete**] This action is no longer supported. See [](/tiles) for more information. */,
    Member("set panorama",List("Boolean"),"Nothing") /* [**obsolete**] This action is no longer supported. See [](/tiles) for more information. */,
    Member("height","Number") /* [**obsolete**] This action is no longer supported. See [](/tiles) for more information. */,
    Member("width","Number") /* [**obsolete**] This action is no longer supported. See [](/tiles) for more information. */,
    Member("clear back icon","Nothing") /* [**obsolete**] This action is no longer supported. See [](/tiles) for more information. */,
    Member("clear icon","Nothing") /* [**obsolete**] This action is no longer supported. See [](/tiles) for more information. */,
    Member("pin to start","Nothing") /* [**obsolete**] This action is no longer supported. See [](/tiles) for more information. */,
    Member("post to wall","Nothing") /* [**obsolete**] This action is no longer supported. See [](/tiles) for more information. */
  ))

  // tiles and notifications for Windows and Windows Phone
  addSingleton("Tiles", List( 
    Member("set default counter",List("Number"),"Nothing") /* Sets the counter of the default tile. Hidden if the number is not between 1 or 99. */,
    Member("set default text",List("String","String"),"Nothing") /* Sets the front of a standard tile. */,
    Member("pin default","Nothing") /* Pins or updates the default tile. */,
    Member("pin pictures",List("String","Number","Picture","Picture Collection"),"Nothing") /* Pins or updates the default tile with custom pictures. */,
    Member("pin picture",List("String","String","Number","Picture"),"Nothing") /* Pins or updates the default tile with a custom picture. */
  ))

  // time and dates
  addSingleton("Time", List( 
    Member("sleep",List("Number"),"Nothing") /* Waits for a specified amount of seconds */,
    Member("now","DateTime") /* Gets the current time */,
    Member("today","DateTime") /* Gets today's date without time */,
    Member("tomorrow","DateTime") /* Gets tomorrow's date without time */,
    Member("fail if not",List("Boolean"),"Nothing") /* Aborts the execution if the condition is false. */,
    Member("stop","Nothing") /* Stops the execution and stays on the wall. */,
    Member("stop and close","Nothing") /* Stops the execution and leaves the wall. */,
    Member("create",List("Number","Number","Number","Number","Number","Number"),"DateTime") /* Creates a new date instance */,
    Member("log",List("String"),"Nothing") /* Appends this message to the debug log. Does nothing when the script is published. */
  ))

  // A timer
  addType("Timer", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("on trigger",List("Action"),"Nothing") /* sets the action to perform when the timer fires */,
    Member("is active","Boolean") /* is the timer active */,
    Member("is interval","Boolean") /* is this an interval timer that fires regularly */,
    Member("set interval",List("Number"),"Nothing") /* set the regular interval in seconds at which this timer fires */,
    Member("set timeout",List("Number"),"Nothing") /* set the time in seconds after which this timer fires once */,
    Member("pause","Nothing") /* deactivates the timer */,
    Member("resume","Nothing") /* reactives the timer */
  ))

  // A user account
  addType("User", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("id","String") /* Gets the id */,
    Member("name","String") /* Gets the name of the user */,
    Member("about","String") /* Gets the about-me text of the user */,
    Member("has picture","Boolean") /* Indicates if the user has a picture */,
    Member("picture address",List("String"),"String") /* Gets the url of the user picture where original is the unmodified user picture, square is 50x50, small has 50px width, normal has 100px width, large has roughly 200px width */,
    Member("picture",List("String"),"Picture") /* Gets the user picture where original is the unmodified user picture, square is 50x50, small has 50px width, normal has 100px width, large has roughly 200px width */,
    Member("post to wall","Nothing") /* Displays the link on the wall */
  ))

  // A 3D vector
  addType("Vector3", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("x","Number") /* Gets the x-component */,
    Member("y","Number") /* Gets the y-component */,
    Member("z","Number") /* Gets the z-component */,
    Member("length","Number") /* Gets the length of the vector */,
    Member("distance",List("Vector3"),"Number") /* Gets the distance between the two vectors */,
    Member("negate","Vector3") /* Returns a vector pointing in the opposite direction */,
    Member("normalize","Vector3") /* Returns a vector of one unit pointing in the same direction as the original vector */,
    Member("add",List("Vector3"),"Vector3") /* Adds a vector */,
    Member("subtract",List("Vector3"),"Vector3") /* Subtracts another vector */,
    Member("multiply",List("Vector3"),"Vector3") /* Multiplies component-wise with a vector */,
    Member("scale",List("Number"),"Vector3") /* Multiplies with a scaling factor */,
    Member("clamp",List("Vector3","Vector3"),"Vector3") /* Restricts the vector in the specified range */,
    Member("cross",List("Vector3"),"Vector3") /* Calculates the cross product with the other vector */,
    Member("linear interpolation",List("Vector3","Number"),"Vector3") /* Linear interpolation between two vectors */,
    Member("to string","String") /* Turns the vector into a string */,
    Member("post to wall","Nothing") /* Displays the vector on the wall */
  ))

  // Ask or display values on the wall...
  addSingleton("Wall", List( 
    Member("clear","Nothing") /* Clears the background, buttons and entries */,
    Member("display search",List("Boolean"),"Nothing") /* [**obsolete**] This action is not supported anymore. */,
    Member("prompt",List("String"),"Nothing") /* Prompts the user with a ok button */,
    Member("ask boolean",List("String","String"),"Boolean") /* Prompts the user with ok and cancel buttons */,
    Member("ask number",List("String"),"Number") /* Prompts the user to input a number */,
    Member("ask string",List("String"),"String") /* Prompts the user to input a string */,
    Member("screenshot","Picture") /* Takes a screenshot of the wall. */,
    Member("create text box",List("String","Number"),"TextBox") /* Creates an updatable text box */,
    Member("pick string",List("String","String","String Collection"),"Number") /* Prompts the user to pick a string from a list. Returns the selected index. */,
    Member("pick time",List("String","String"),"DateTime") /* Prompts the user to pick a time. Returns a datetime whose time is set, the date is undefined. */,
    Member("pick date",List("String","String"),"DateTime") /* Prompts the user to pick a date. Returns a datetime whose date is set, the time is 12:00:00. */,
    Member("set foreground",List("Color"),"Nothing") /* Sets the wall foreground color of elements. */,
    Member("clear background","Nothing") /* Clears the background color, picture and camera */,
    Member("set background",List("Color"),"Nothing") /* Sets the wall background color. */,
    Member("set page transition style",List("String"),"Nothing") /* [**dbg**] Sets the animation for push/pop of pages. */,
    Member("set background picture",List("Picture"),"Nothing") /* Sets the wall background picture. The picture will be resized and clipped to the screen background as needed. */,
    Member("set background camera",List("Camera"),"Nothing") /* Sets the wall background camera. */,
    Member("set transform matrix",List("Number","Number","Number","Number","Number","Number"),"Nothing") /* [**not implemented**] Sets the 3x3 affine matrix transformation applied to the wall. */,
    Member("set reversed",List("Boolean"),"Nothing") /* Reverses the elements on the wall and inserts new ones at the bottom. */,
    Member("set title",List("String"),"Nothing") /* Sets the title of the wall. */,
    Member("set subtitle",List("String"),"Nothing") /* Sets the subtitle of the wall. */,
    Member("icon names","String Collection") /* [**obsolete**] Use button icon names instead. */,
    Member("clear buttons","Nothing") /* Clears the application bar buttons and hides the bar */,
    Member("add button",List("String","String"),"Page Button") /* Add a new button. icon must be the name of a built-in icon, text must be non-empty. */,
    Member("current page","Page") /* Gets the current page displayed on the wall */,
    Member("push new page","Page") /* Pushes an empty page on the wall. */,
    Member("pop page","Boolean") /* Pops the current page and restores the previous wall page. Returns false if already on the default page. */,
    Member("pop page with transition",List("String"),"Boolean") /* Same as `wall->pop_page`, but lets you use specific animation. */,
    Member("pages","Page Collection") /* Returns the current back stack of pages, starting from the current page to the bottom page. */,
    Member("button icon names","String Collection") /* Gets the list of available page button names. */,
    Member("width","Number") /* Gets the width of the screen (in pixels). */,
    Member("height","Number") /* Gets the height of the screen (in pixels). */
  ))

  // Search and browse the web...
  addSingleton("Web", List( 
    Member("search",List("String"),"Link Collection") /* Searching the web using Bing */,
    Member("search nearby",List("String","Location","Number"),"Link Collection") /* Searching the web near a location using Bing. Distance in meters, negative to ignore. */,
    Member("search images",List("String"),"Link Collection") /* Searching images using Bing */,
    Member("search images nearby",List("String","Location","Number"),"Link Collection") /* Searching images near a location using Bing. Distance in meters, negative to ignore. */,
    Member("search phone numbers",List("String"),"Link Collection") /* [**obsolete**] Search phone numbers using Bing */,
    Member("search phone numbers nearby",List("String","Location","Number"),"Link Collection") /* [**obsolete**] Search phone numbers near a location using Bing. Distance in meters, negative to ignore. */,
    Member("search news",List("String"),"Link Collection") /* Searching news using Bing */,
    Member("search news nearby",List("String","Location","Number"),"Link Collection") /* Searching news near a location using Bing. Distance in meters, negative to ignore. */,
    Member("is connected","Boolean") /* Indicates whether any network connection is available */,
    Member("connection type","String") /* Gets the type of the network servicing Internet requests (unknown, none, ethernet, wifi, mobile) */,
    Member("connection name","String") /* Gets a name of the currently connected network servicing Internet requests. Empty string if no connection. */,
    Member("open connection settings",List("String"),"Nothing") /* Opens a connection settings page (airplanemode, bluetooth, wifi, cellular) */,
    Member("browse",List("String"),"Nothing") /* Opens a web browser to a url */,
    Member("play media",List("String"),"Nothing") /* Plays an internet audio/video in full screen */,
    Member("link media",List("String"),"Link") /* Creates a link to an internet audio/video */,
    Member("link image",List("String"),"Link") /* Creates a link to an internet image */,
    Member("link url",List("String","String"),"Link") /* Creates a link to an internet page */,
    Member("link deep zoom",List("String"),"Link") /* [**obsolete**] Creates a multi-scale image from an image url */,
    Member("download",List("String"),"String") /* Downloads the content of an internet page (http get) */,
    Member("download json",List("String"),"Json Object") /* Downloads a web service response as a JSON data structure (http get) */,
    Member("download sound",List("String"),"Sound") /* Downloads a WAV sound file from internet */,
    Member("download song",List("String","String"),"Song") /* Create a streamed song file from internet (download happens when playing) */,
    Member("upload",List("String","String"),"String") /* Uploads text to an internet page (http post) */,
    Member("upload sound",List("String","Sound"),"String") /* Uploads a sound to an internet page (http post). The sound must have been recorded from the microphone. */,
    Member("upload picture",List("String","Picture"),"String") /* Uploads a picture to an internet page (http post) */,
    Member("download picture",List("String"),"Picture") /* Downloads a picture from internet */,
    Member("html decode",List("String"),"String") /* Decodes a string that has been HTML-encoded */,
    Member("html encode",List("String"),"String") /* Converts a text string into an HTML-encoded string */,
    Member("url decode",List("String"),"String") /* Decodes a string that has been url-encoded */,
    Member("url encode",List("String"),"String") /* Converts a text string into an url-encoded string */,
    Member("json",List("String"),"Json Object") /* Parses the string as a json object */,
    Member("json object","Json Object") /* Returns an empty json object */,
    Member("json array","Json Object") /* Returns an empty json array */,
    Member("xml",List("String"),"Xml Object") /* Parses the string as a xml element */,
    Member("rss",List("String"),"Message Collection") /* [**obsolete**] Obsolete. Use 'feed' instead. */,
    Member("create request",List("String"),"Web Request") /* Creates a web request */,
    Member("base64 decode",List("String"),"String") /* Decodes a string that has been base64-encoded */,
    Member("base64 encode",List("String"),"String") /* Converts a string into an base64-encoded string */,
    Member("feed",List("String"),"Message Collection") /* Parses the newsfeed string (RSS 2.0 or Atom 1.0) into a message collection */,
    Member("create json builder","Json Builder") /* Creates a json builder */,
    Member("csv",List("String","String"),"Json Object") /* Parses a Command Separated Values document into a JsonObject where the `headers` is a string array of column names; `records` is an array of rows where each row is itself an array of strings. The delimiter is inferred if not specified. */,
    Member("oauth v2",List("String"),"OAuth Response") /* Authenticate with OAuth 2.0 and receives the access token or error. See [](/oauthv2) for more information on which Redirect URI to choose. */,
    Member("create form builder","Form Builder") /* Create a form builder */
  ))

  // An HTTP web request
  addType("Web Request", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("method","String") /* Gets whether it was a 'get' or a 'post'. */,
    Member("set method",List("String"),"Nothing") /* Sets the method as 'get' or 'post'. Default value is 'get'. */,
    Member("url","String") /* Gets the url of the request */,
    Member("set url",List("String"),"Nothing") /* Sets the url of the request. Must be a valid internet address. */,
    Member("header",List("String"),"String") /* Gets the value of a given header */,
    Member("set header",List("String","String"),"Nothing") /* Sets an HTML header value. Empty string clears the value */,
    Member("equals",List("Web Request"),"Boolean") /* Indicates if both requests are the same instance. */,
    Member("set accept",List("String"),"Nothing") /* Sets the Accept header type ('text/xml' for xml, 'application/json' for json). */,
    Member("post to wall","Nothing") /* Displays the request to the wall */,
    Member("send async","Nothing") /* Sends the request asynchronously. Attach a handler to 'on response received' to receive the response. */,
    Member("on response received",List("Web Response Action"),"Nothing") /* Set what happens whenever the response comes back from 'send async'. */,
    Member("send","Web Response") /* Performs the request synchronously */,
    Member("set content",List("String"),"Nothing") /* Sets the content of a 'post' request */,
    Member("set content as json",List("Json Object"),"Nothing") /* Sets the content of a 'post' request as the JSON tree */,
    Member("set content as buffer",List("Buffer"),"Nothing") /* Sets the content of a 'post' request as a binary buffer */,
    Member("set content as form",List("Form Builder"),"Nothing") /* Sets the content as multipart/form-data. */,
    Member("set content as picture",List("Picture","Number"),"Nothing") /* Sets the content of a 'post' request as a JPEG encoded image. Quality from 0 (worse) to 1 (best). */,
    Member("set content as xml",List("Xml Object"),"Nothing") /* Sets the content of a 'post' request as the XML tree */,
    Member("set credentials",List("String","String"),"Nothing") /* Sets the name and password for basic authentication. Requires an HTTPS URL, empty string clears. */,
    Member("header names","String Collection") /* Gets the names of the headers */,
    Member("set compress",List("Boolean"),"Nothing") /* Compresses the request content with gzip and sets the Content-Encoding header */
  ))

  // An HTTP web response
  addType("Web Response", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("request","Web Request") /* Gets the request associated to this response */,
    Member("status code","Number") /* Gets the HTTP Status code of the request if any */,
    Member("content","String") /* Reads the response body as a string */,
    Member("content as json","Json Object") /* Reads the response body as a JSON tree */,
    Member("content as picture","Picture") /* [**not implemented**] Reads the response body as a picture */,
    Member("content as sound","Sound") /* [**not implemented**] Reads the response body as a wave sound */,
    Member("content as xml","Xml Object") /* Reads the response body as a XML tree */,
    Member("header",List("String"),"String") /* Gets the value of a given header */,
    Member("header names","String Collection") /* Gets the names of the headers */,
    Member("post to wall","Nothing") /* Displays the response to the wall */
  ))

  // An xml element or collection of elements
  addType("Xml Object", List( 
    Member("is invalid","Boolean") /* Returns true if the current instance is useless */,
    Member("count","Number") /* Gets the number of child element */,
    Member("is element","Boolean") /* Indicates if this instance is an element or a filtered collection */,
    Member("name","String") /* Gets the full name of this element */,
    Member("value","String") /* Gets the concatenated text contents of this element */,
    Member("at index",List("Number"),"Xml Object") /* ONLY INSIDE SAMPLE: an accessor which is always number based */,
    Member("copy","Xml Object") /* ONLY INSIDE SAMPLE: cloning a collection*/,
    Member("at",List("Number"),"Xml Object") /* Gets the i-th child element in the collection */,
    Member("attr",List("String"),"String") /* Gets the value of the attribute */,
    Member("attr names","String Collection") /* Gets the list of attribute names */,
    Member("child",List("String"),"Xml Object") /* Gets a first child element matching the fully qualified name */,
    Member("children",List("String"),"Xml Object") /* Gets a collection of child element matching the fully qualified name */,
    Member("post to wall","Nothing") /* Display the xml content to the wall */,
    Member("to string","String") /* Gets an xml string */,
    Member("local name","String") /* Gets the local name of this element */,
    Member("namespace","String") /* Gets the namespace of this element */,
    Member("create name",List("String","String"),"String") /* Creates a qualified full name from the namespace and local name */
  ))

  // an unknown value
  addType("Unknown", List( 
    Member(":=",List("Unknown","Unknown"),"Unknown") /*  */,
    Member(",",List("Unknown","Unknown"),"Unknown") /*  */,
    Member("async",List("Unknown"),"Unknown") /*  */,
    Member("await",List("Unknown"),"Unknown") /*  */
  ))


}
    
