field val: Int

domain Array
{
    function loc(a: Array, i: Int): Ref
    function length(a: Array): Int
    function get_index(r: Ref): Int
    function get_array(r: Ref): Array

    axiom axiom_array { forall a: Array, i: Int :: get_array(loc(a, i)) == a }
    axiom axiom_index { forall a: Array, i: Int :: get_index(loc(a, i)) == i }
    axiom axiom_length { forall a: Array :: 0 <= length(a) }
}

method reverse(a: Array, c: Array, k: Int)
{
    var i: Int
    var l: Int

    l := length(a)

    i := 0
    while (i < l)
    {
        loc(c, i).val := loc(a, i).val
        i := i + 1
    }

    i := 0
    while (i < l)
    {
        loc(a, i).val := loc(c, l - i - 1).val
        i := i + 1
    }

    if (0 <= k && k <= l) {
        assert loc(a, k).val == loc(c, l - k - 1).val
    }
}