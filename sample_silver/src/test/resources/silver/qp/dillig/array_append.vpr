field val: Int

domain Array
{
    function loc(a: Array, i: Int): Ref
    function length(a: Array): Int
    function get_index(r: Ref): Int
    function get_array(r: Ref): Array

    axiom axiom_array { forall a: Array, i: Int :: get_array(loc(a, i)) == a }
    axiom axiom_index { forall a: Array, i: Int :: get_index(loc(a, i)) == i }
    axiom axiom_length { forall a: Array :: 0 <= length(a) }
}

method array_append(a: Array, b: Array, la: Int, lb: Int, k: Int)
{

    var i: Int

    i := la
    while (i < la + lb)
    {
        loc(a, i).val := loc(b, i - la).val
        i := i + 1
    }

    if (la <= k && k < la + lb) {
        assert loc(a, k).val == loc(b, k - la).val
    }
}