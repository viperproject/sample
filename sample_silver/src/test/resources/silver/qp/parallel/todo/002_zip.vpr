field val: Int

domain Array
{
    function loc(a: Array, i: Int): Ref
    function length(a: Array): Int
    function get_index(r: Ref): Int
    function get_array(r: Ref): Array

    axiom axiom_array { forall a: Array, i: Int :: get_array(loc(a, i)) == a }
    axiom axiom_index { forall a: Array, i: Int :: get_index(loc(a, i)) == i }
    axiom axiom_length { forall a: Array :: 0 <= length(a) }
}

method zip_body(a: Array, b: Array, r: Array, i: Int)
{
    loc(r, i).val := loc(a, i / 2).val
    loc(r, i + 1).val := loc(b, i / 2).val
}

method zip(a: Array, b: Array, r: Array)
{
    var i: Int
    var l: Int

    i := 0
    l := length(r)

    while (i < l)
    {
        exhale acc(loc(r, i).val)
        exhale acc(loc(r, i + 1).val)
        exhale acc(loc(a, i / 2).val, 1 / 2)
        exhale acc(loc(b, i / 2).val, 1 / 2)
        i := i + 2
    }

}