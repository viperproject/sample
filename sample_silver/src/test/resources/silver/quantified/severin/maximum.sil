field val: Int

domain Array
{
    function loc(a: Array, i: Int): Ref
    function length(a: Array): Int
    function get_index(r: Ref): Int
    function get_array(r: Ref): Array

    axiom axiom_array { forall a: Array, i: Int :: get_array(loc(a, i)) == a }
    axiom axiom_index { forall a: Array, i: Int :: get_index(loc(a, i)) == i }
    axiom axiom_length { forall a: Array :: 0 <= length(a) }
}

method main_expected(a: Array, read: Perm)
    requires none < read && read < write
    requires forall q: Int :: 0 <= q && q < length(a) && 1 <= length(a) ==> acc(loc(a, q).val, read)
    ensures true

method main(a: Array) returns (x: Int)
{
    var l: Int
    l := length(a)
    if (l <= 0) {
        x := -1
    } else {
        var y: Int
        x := 0;
        y := l - 1;

        while (x != y)
        {
            if (loc(a, x).val <= loc(a, y).val) {
                x := x + 1
            } else {
                y := y - 1
            }
        }
    }
}