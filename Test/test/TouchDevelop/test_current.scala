import ch.ethz.inf.pm.td.analysis.TestRunner



val toAnalyze =
  """
  """.stripMargin.split("[\n,]").map(_.trim).toSet

def analyzer(id:String) {
  if(!id.isEmpty)
    TestRunner.runIdWithApron(id)
}

for(a <- toAnalyze) {
  analyzer(a)
}

//TestRunner("anffpsen",analyzer _)
//TestRunner("ajxunopn",analyzer _)
//TestRunner("aaslb",analyzer _)
//TestRunner("aawlauxh",analyzer _)
//TestRunner("aaihptlx",analyzer _)

//TestRunner("gyxha",analyzer _)

// TestRunner("ybcy",analyzer _)
//TestRunner("dvvx",analyzer _) //NONTERM
//TestRunner("tqgla",analyzer _)
//TestRunner("ayleioek",analyzer _)
//TestRunner("uyphb",analyzer _)
//TestRunner("wxoza",analyzer _) // SOMEWHAT, OKAY
TestRunner("gyxha",analyzer _)
//TestRunner("etww",analyzer _)
//TestRunner("awaja",analyzer _)

//TestRunner("kyom",analyzer _) // Simply excluded: Closures
//TestRunner("veuo",analyzer _)
//TestRunner("qfsp",analyzer _)
//TestRunner("ecvs",analyzer _) // One false bottom
//TestRunner("zvpj",analyzer _) // Same false bottom
//TestRunner("gdmr",analyzer _)

//TestRunner("tomz",analyzer _) // All true
//TestRunner("hqxs",analyzer _) // All true
//TestRunner("vede",analyzer _) // All true

//TestRunner("uujx,llvn,vede,mbzn,maku,enoxa,yovpa,aapx,algi,tktv,hkqf,wfps,kvmi,eqcf,qvci,hbei,ileo,djtr,kyom,zlup".split(",").toList,analyzer _) // APRON infinity assertion


//TestRunner("zvpj",analyzer _) // ---> 4 false alarms, mostly based on the summary node problem. Takes forever
//TestRunner("ecvs",analyzer _) // ---> A few bottoms, half of which are true + two false alarms
//TestRunner("gdmr",analyzer _) // ---> 9 false alarms, summary problem and recursion invalid problem
//TestRunner("weqz",analyzer _) // ---> 12 false alarms, should be inlined or give an example
//TestRunner("tglf",analyzer _) // ---> 40 false alarms

//TestRunner("yzty",analyzer _) // ---> 1 false alarms (neg.). Takes 44 Seconds!
//TestRunner("zlup",analyzer _) // ---> 1 false alarms (neg.), missing lazy evaluation, APRON infinity assertion
//TestRunner("hbei",analyzer _) // ---> 1 false alarms (neg.), string representation + split [[[ IF WE IMPLEMENT SPLIT, THIS COULD SHOW A MOTIVATING EXAMPLE ]]]
//TestRunner("kvmi",analyzer _) // ---> 1 false alarms (neg.), picture can not be both negative
//TestRunner("tktv",analyzer _) // ---> 3 false alarms (neg.), complex numerical relationship on string length
//TestRunner("vrgt",analyzer _) // ---> 3 false alarms (neg.), may be fixed by summary + must analysis. Show in Paper?
//TestRunner("ywqu",analyzer _) // ---> 2 false alarms (neg.), invalid in recursions
//TestRunner("yzfx",analyzer _) // ---> 2 false alarms (neg.), scope problem?
//TestRunner("qfsp",analyzer _) // ---> 1 false alarms (neg.), interprocedural problem (data becomes invalid in call)

//TestRunner("pyxj",analyzer _) // JSON: Should be fine now
//TestRunner("gxkm",analyzer _) // JSON: Should be fine now
//TestRunner("hrvg",analyzer _) // JSON: Should be fine now
//TestRunner("frks",analyzer _) // JSON: Should be fine now
// FIXED: qurl, all true now
// FIXED: tomz, all true now
// FIXED: oobx, all true now
// FIXED: jkdg, all true now
// FIXED: xbfg, all fast now
// FIXED: hqxs, all true now
// FIXED: disx. Nothing
// FIXED: fxti, Nothing


// CASE STUDIES
//TestRunner("lcpp",analyzer _)

//TestRunner("apqo",analyzer _)
//TestRunner("asvfa",analyzer _)
//TestRunner("azmc",analyzer _)
//TestRunner("aednzsyv",analyzer _)
//TestRunner("ailv",analyzer _)
//TestRunner("awiza",analyzer _)
//TestRunner("agcpa",analyzer _)
//TestRunner("aezg",analyzer _)
//TestRunner("aefp",analyzer _)
//TestRunner("arspcael",analyzer _)
//TestRunner("avcv",analyzer _)
//TestRunner("ayeziqzg",analyzer _)
//TestRunner("adsb",analyzer _)
//TestRunner("axqw",analyzer _)
//TestRunner("akssa",analyzer _)
//TestRunner("aybi",analyzer _)
//TestRunner("azufa",analyzer _)
//TestRunner("aess",analyzer _)
//TestRunner("accz",analyzer _)
//TestRunner("aavbvjbh",analyzer _)
//TestRunner("adiq",analyzer _)
//TestRunner("acklhsaw",analyzer _)
//TestRunner("aleub",analyzer _)
//TestRunner("aztmqrmt",analyzer _)
//TestRunner("apvubnrd",analyzer _)
//TestRunner("alssaclh",analyzer _)
//TestRunner("apxua",analyzer _)
//TestRunner("ahhq",analyzer _)
//TestRunner("asqcadxo",analyzer _)
//TestRunner("azge",analyzer _)
//TestRunner("audgdukc",analyzer _)
//TestRunner("afaz",analyzer _)
//TestRunner("arqbuyyi",analyzer _)
//TestRunner("auufa",analyzer _)
//TestRunner("awmi",analyzer _)
//TestRunner("awrs",analyzer _)
//TestRunner("agmua",analyzer _)
//TestRunner("aybuawxl",analyzer _)
//TestRunner("akfw",analyzer _)
//TestRunner("aufm",analyzer _)
//TestRunner("abes",analyzer _)
//TestRunner("awmo",analyzer _)
//TestRunner("azwwb",analyzer _)
//TestRunner("abos",analyzer _)
//TestRunner("abaua",analyzer _)
//TestRunner("awsv",analyzer _)
//TestRunner("aaoweirj",analyzer _)
//TestRunner("aiqt",analyzer _)
//TestRunner("anffpsen",analyzer _)
//TestRunner("apcbwekh",analyzer _)
//TestRunner("aiqs",analyzer _)
//TestRunner("aywk",analyzer _)
//TestRunner("adeha",analyzer _)
//TestRunner("ajkdb",analyzer _)
//TestRunner("afwk",analyzer _)
//TestRunner("ajxj",analyzer _)
//TestRunner("abtk",analyzer _)
//TestRunner("adjva",analyzer _)
//TestRunner("afrp",analyzer _)
//TestRunner("afpy",analyzer _)
//TestRunner("aavna",analyzer _)
//TestRunner("avyjoagm",analyzer _)
//TestRunner("abjla",analyzer _)
//TestRunner("agtya",analyzer _)
//TestRunner("afnh",analyzer _)
//TestRunner("aufbynmi",analyzer _)
//TestRunner("axbq",analyzer _)
//TestRunner("avss",analyzer _)
//TestRunner("ariqa",analyzer _)
//TestRunner("awql",analyzer _)
//TestRunner("ajdxb",analyzer _)
//TestRunner("ahyja",analyzer _)
//TestRunner("aclu",analyzer _)
//TestRunner("ajxw",analyzer _)
//TestRunner("axlp",analyzer _)
//TestRunner("abap",analyzer _)
//TestRunner("airea",analyzer _)
//TestRunner("abvlb",analyzer _)
//TestRunner("arrxubce",analyzer _)
//TestRunner("aichb",analyzer _)
//TestRunner("apfhmmoe",analyzer _)
//TestRunner("ayfvceiu",analyzer _)
//TestRunner("ardxcpsq",analyzer _)
//TestRunner("anxymjkd",analyzer _)
//TestRunner("apwj",analyzer _)
//TestRunner("aohu",analyzer _)
//TestRunner("axolsujt",analyzer _)
//TestRunner("aphn",analyzer _)
//TestRunner("ahex",analyzer _)
//TestRunner("anisa",analyzer _)
//TestRunner("axhdcxsn",analyzer _)
//TestRunner("aewpa",analyzer _)
//TestRunner("avsnjrve",analyzer _)
//TestRunner("anvu",analyzer _)
//TestRunner("aebmjdgr",analyzer _)
//TestRunner("ayik",analyzer _)
//TestRunner("asnpjccj",analyzer _)
//TestRunner("aoht",analyzer _)
//TestRunner("abilwiun",analyzer _)
//TestRunner("akcj",analyzer _)
//TestRunner("anpva",analyzer _)
//TestRunner("ashja",analyzer _)
//TestRunner("anyp",analyzer _)
//TestRunner("azvka",analyzer _)
//TestRunner("aunfa",analyzer _)
//TestRunner("anlmwpmd",analyzer _)
//TestRunner("aglo",analyzer _)
//TestRunner("aipxzjir",analyzer _)
//TestRunner("ateja",analyzer _)
//TestRunner("abgrrcyn",analyzer _)
//TestRunner("aicpuhzr",analyzer _)
//TestRunner("aejq",analyzer _)
//TestRunner("audw",analyzer _)
//TestRunner("aweh",analyzer _)
//TestRunner("aoxm",analyzer _)
//TestRunner("azkueztq",analyzer _)
//TestRunner("agif",analyzer _)
//TestRunner("awqy",analyzer _)
//TestRunner("axlk",analyzer _)
//TestRunner("abbbmzhy",analyzer _)
//TestRunner("alztwwko",analyzer _)
//TestRunner("atzq",analyzer _)
//TestRunner("aobd",analyzer _)
//TestRunner("apbw",analyzer _)
//TestRunner("asif",analyzer _)
//TestRunner("ayic",analyzer _)
//TestRunner("arjua",analyzer _)
//TestRunner("arbu",analyzer _)
//TestRunner("aaxdb",analyzer _)
//TestRunner("afaj",analyzer _)
//TestRunner("admc",analyzer _)
//TestRunner("ajde",analyzer _)
//TestRunner("awmz",analyzer _)
//TestRunner("afrnigvy",analyzer _)
//TestRunner("awnba",analyzer _)
//TestRunner("awhz",analyzer _)
//TestRunner("arid",analyzer _)
//TestRunner("aohd",analyzer _)
//TestRunner("aweg",analyzer _)
//TestRunner("aenga",analyzer _)
//TestRunner("acwoa",analyzer _)
//TestRunner("aeio",analyzer _)
//TestRunner("azze",analyzer _)
//TestRunner("arbi",analyzer _)
//TestRunner("anvla",analyzer _)
//TestRunner("axmi",analyzer _)
//TestRunner("apml",analyzer _)
//TestRunner("aftba",analyzer _)
//TestRunner("awvofzls",analyzer _)
//TestRunner("arwba",analyzer _)
//TestRunner("aabja",analyzer _)
//TestRunner("aaoma",analyzer _)
//TestRunner("adhj",analyzer _)
//TestRunner("aryqa",analyzer _)
//TestRunner("agkp",analyzer _)
//TestRunner("aztzagvv",analyzer _)
//TestRunner("avcsoowy",analyzer _)
//TestRunner("asxp",analyzer _)
//TestRunner("afmw",analyzer _)
//TestRunner("awxz",analyzer _)
//TestRunner("asyfxkxl",analyzer _)
//TestRunner("acsc",analyzer _)
//TestRunner("asizvzqg",analyzer _)
//TestRunner("agjs",analyzer _)
//TestRunner("areixewf",analyzer _)
//TestRunner("akbo",analyzer _)
//TestRunner("aydra",analyzer _)
//TestRunner("anbfa",analyzer _)
//TestRunner("axfrb",analyzer _)
//TestRunner("akuidlaz",analyzer _)
//TestRunner("azwoxpay",analyzer _)
//TestRunner("aaeha",analyzer _)
//TestRunner("ajpr",analyzer _)
//TestRunner("ahcptqol",analyzer _)
//TestRunner("axgv",analyzer _)
//TestRunner("aeic",analyzer _)
//TestRunner("adyq",analyzer _)
//TestRunner("alokjtqk",analyzer _)
//TestRunner("azyp",analyzer _)
//TestRunner("abzj",analyzer _)
//TestRunner("aveca",analyzer _)
//TestRunner("acgbgxqn",analyzer _)
//TestRunner("anxba",analyzer _)
//TestRunner("aoxpygyx",analyzer _)
//TestRunner("apvyeanf",analyzer _)
//TestRunner("awqv",analyzer _)
//TestRunner("afie",analyzer _)
//TestRunner("aszo",analyzer _)
//TestRunner("agfba",analyzer _)
//TestRunner("augw",analyzer _)
//TestRunner("acpt",analyzer _)
//TestRunner("armhbnpb",analyzer _)
//TestRunner("avdxa",analyzer _)
//TestRunner("aiqk",analyzer _)
//TestRunner("advsuufr",analyzer _)
//TestRunner("alxx",analyzer _)
//TestRunner("ahiz",analyzer _)
//TestRunner("abxd",analyzer _)
//TestRunner("akrl",analyzer _)
//TestRunner("acpl",analyzer _)
//TestRunner("aarh",analyzer _)
//TestRunner("ajhxiksy",analyzer _)
//TestRunner("areb",analyzer _)
//TestRunner("abxi",analyzer _)
//TestRunner("awec",analyzer _)
//TestRunner("avwp",analyzer _)
//TestRunner("auisbdwo",analyzer _)
//TestRunner("ayrb",analyzer _)
//TestRunner("alvba",analyzer _)
//TestRunner("anat",analyzer _)
//TestRunner("awuva",analyzer _)
//TestRunner("aucj",analyzer _)
//TestRunner("abuya",analyzer _)
//TestRunner("acgd",analyzer _)
//TestRunner("awlm",analyzer _)
//TestRunner("aads",analyzer _)
//TestRunner("avwi",analyzer _)
//TestRunner("ahro",analyzer _)
//TestRunner("ayoqkbgm",analyzer _)
//TestRunner("addk",analyzer _)
//TestRunner("awkk",analyzer _)
//TestRunner("arlua",analyzer _)
//TestRunner("aisx",analyzer _)
//TestRunner("abhe",analyzer _)
//TestRunner("aest",analyzer _)
//TestRunner("aojc",analyzer _)
//TestRunner("aegi",analyzer _)
//TestRunner("atmmdilb",analyzer _)
//TestRunner("axev",analyzer _)
//TestRunner("aktn",analyzer _)
//TestRunner("atyz",analyzer _)
//TestRunner("ajpqa",analyzer _)
//TestRunner("arsh",analyzer _)
//TestRunner("ayrw",analyzer _)
//TestRunner("agxm",analyzer _)
//TestRunner("asdga",analyzer _)
//TestRunner("adfna",analyzer _)
//TestRunner("aokwa",analyzer _)
//TestRunner("aayr",analyzer _)
//TestRunner("azjr",analyzer _)
//TestRunner("ahyr",analyzer _)
//TestRunner("asub",analyzer _)
//TestRunner("alvj",analyzer _)
//TestRunner("akms",analyzer _)
//TestRunner("atth",analyzer _)
//TestRunner("aowc",analyzer _)
//TestRunner("archtmce",analyzer _)
//TestRunner("auab",analyzer _)
//TestRunner("atstuexj",analyzer _)
//TestRunner("aesx",analyzer _)
//TestRunner("akey",analyzer _)
//TestRunner("apzh",analyzer _)
//TestRunner("aolla",analyzer _)
//TestRunner("aapzacrw",analyzer _)
//TestRunner("apym",analyzer _)
//TestRunner("acnh",analyzer _)
//TestRunner("aote",analyzer _)
//TestRunner("awknb",analyzer _)
//TestRunner("afhk",analyzer _)
//TestRunner("axzp",analyzer _)
//TestRunner("ahbk",analyzer _)
//TestRunner("abmj",analyzer _)
//TestRunner("agcr",analyzer _)
//TestRunner("adqja",analyzer _)
//TestRunner("abjk",analyzer _)
//TestRunner("atmi",analyzer _)
//TestRunner("akhq",analyzer _)
//TestRunner("aflwa",analyzer _)
//TestRunner("avtq",analyzer _)
//TestRunner("abrv",analyzer _)
//TestRunner("appla",analyzer _)
//TestRunner("akic",analyzer _)
//TestRunner("acvb",analyzer _)
//TestRunner("ahlz",analyzer _)
//TestRunner("aybr",analyzer _)
//TestRunner("aoxv",analyzer _)
//TestRunner("avfb",analyzer _)
//TestRunner("aoiz",analyzer _)
//TestRunner("akdi",analyzer _)
//TestRunner("aniga",analyzer _)
//TestRunner("ajzp",analyzer _)
//TestRunner("asyz",analyzer _)
//TestRunner("abuq",analyzer _)
//TestRunner("afjc",analyzer _)
//TestRunner("akym",analyzer _)
//TestRunner("auhca",analyzer _)
//TestRunner("afki",analyzer _)
//TestRunner("agcm",analyzer _)
//TestRunner("afke",analyzer _)
//TestRunner("arce",analyzer _)
//TestRunner("apnn",analyzer _)
//TestRunner("ayiu",analyzer _)
//TestRunner("azuf",analyzer _)
//TestRunner("abyb",analyzer _)
//TestRunner("asnk",analyzer _)
//TestRunner("apfxa",analyzer _)
//TestRunner("ahgh",analyzer _)
//TestRunner("afmb",analyzer _)
//TestRunner("axppa",analyzer _)
//TestRunner("acph",analyzer _)
//TestRunner("aaxd",analyzer _)
//TestRunner("ajzs",analyzer _)
//TestRunner("aatk",analyzer _)
//TestRunner("axyn",analyzer _)
//TestRunner("anst",analyzer _)
//TestRunner("anxb",analyzer _)
//TestRunner("aiqn",analyzer _)
//TestRunner("aapx",analyzer _)
//TestRunner("aiqm",analyzer _)
//TestRunner("aded",analyzer _)
//TestRunner("apsh",analyzer _)
//TestRunner("aizu",analyzer _)
//TestRunner("axxc",analyzer _)
//TestRunner("ackj",analyzer _)
//TestRunner("axtj",analyzer _)
//TestRunner("aopi",analyzer _)
//TestRunner("auvw",analyzer _)
//TestRunner("awjo",analyzer _)
//TestRunner("aips",analyzer _)
//TestRunner("almg",analyzer _)
//TestRunner("aauh",analyzer _)
//TestRunner("asml",analyzer _)
//TestRunner("apuv",analyzer _)
//TestRunner("ajif",analyzer _)
//TestRunner("aluea",analyzer _)
//TestRunner("aaub",analyzer _)
//TestRunner("ahyv",analyzer _)
//TestRunner("azwg",analyzer _)
//TestRunner("afnk",analyzer _)
//TestRunner("ajlu",analyzer _)
//TestRunner("arrw",analyzer _)
//TestRunner("amaha",analyzer _)
//TestRunner("axdb",analyzer _)
//TestRunner("ahau",analyzer _)
//TestRunner("absb",analyzer _)
//TestRunner("ajnt",analyzer _)
//TestRunner("atxt",analyzer _)
//TestRunner("aagf",analyzer _)
//TestRunner("aylf",analyzer _)
//TestRunner("abtl",analyzer _)
//TestRunner("aokp",analyzer _)
//TestRunner("afxx",analyzer _)
//TestRunner("aewy",analyzer _)
//TestRunner("aojn",analyzer _)
//TestRunner("adjg",analyzer _)
//TestRunner("aqdx",analyzer _)
//TestRunner("awic",analyzer _)