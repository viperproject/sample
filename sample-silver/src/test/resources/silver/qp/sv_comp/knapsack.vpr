field val: Int

domain Array
{
    function loc(a: Array, i: Int): Ref
    function length(a: Array): Int
    function get_index(r: Ref): Int
    function get_array(r: Ref): Array

    axiom axiom_array { forall a: Array, i: Int :: get_array(loc(a, i)) == a }
    axiom axiom_index { forall a: Array, i: Int :: get_index(loc(a, i)) == i }
    axiom axiom_length { forall a: Array :: 0 <= length(a) }
}


method knapsack(s: Array, v: Array, c: Array, b: Array, n: Int, m: Int)
{
    var i: Int
    var j: Int

    j := 1
    while (j <= n)
    {
        i := 1
        while (i <= m)
        {
            if (loc(s, j).val <= i) {
                if (loc(c, i).val < loc(c, i - loc(s, j).val).val + loc(v, j).val) {
                    loc(c, i).val := loc(c, i - loc(s, j).val).val + loc(v, j).val
                    loc(b, i).val := j
                }
            }
            i := i + 1
        }
        j := j + 1
    }
}