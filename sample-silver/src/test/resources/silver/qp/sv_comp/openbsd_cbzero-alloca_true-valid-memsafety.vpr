field val: Int

domain Array
{
    function loc(a: Array, i: Int): Ref
    function length(a: Array): Int
    function get_index(r: Ref): Int
    function get_array(r: Ref): Array

    axiom axiom_array { forall a: Array, i: Int :: get_array(loc(a, i)) == a }
    axiom axiom_index { forall a: Array, i: Int :: get_index(loc(a, i)) == i }
    axiom axiom_length { forall a: Array :: 0 <= length(a) }
}

method main_expected(a: Array)
    requires forall q: Int :: 0 <= q && q < length(a) ==> acc(loc(a, q).val)
    ensures forall q: Int :: 0 <= q && q < length(a) ==> acc(loc(a, q).val)

method main(a: Array)
{
    var i: Int
    var l: Int
    var k: Int

    i := 0
    k := length(a)
    l := k

    while (l > 0)
    {
        loc(a, i).val := 0
        i := i + 1
        l := l - 1
    }
}
