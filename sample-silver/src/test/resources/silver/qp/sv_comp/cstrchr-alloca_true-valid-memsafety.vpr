field val: Int

domain Array
{
    function loc(a: Array, i: Int): Ref
    function length(a: Array): Int
    function get_index(r: Ref): Int
    function get_array(r: Ref): Array

    axiom axiom_array { forall a: Array, i: Int :: get_array(loc(a, i)) == a }
    axiom axiom_index { forall a: Array, i: Int :: get_index(loc(a, i)) == i }
    axiom axiom_length { forall a: Array :: 0 <= length(a) }
}

// not precise
method main_expected(a: Array, v: Int, read: Perm)
    requires forall q: Int :: 0 <= q ==> acc(loc(a, q).val, read)
    ensures forall q: Int :: 0 <= q ==> acc(loc(a, q).val, read)

method main(a: Array, v: Int) returns (i: Int)
{
    var l: Int

    i := 0
    l := length(a)

    while (i < l && loc(a, i).val != v)
    {
        i := i + 1
    }

    if (loc(a, i).val != v) {
        i := -1
    }
}
