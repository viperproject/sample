field val: Int

domain Array
{
    function loc(a: Array, i: Int): Ref
    function length(a: Array): Int
    function get_index(r: Ref): Int
    function get_array(r: Ref): Array

    axiom axiom_array { forall a: Array, i: Int :: get_array(loc(a, i)) == a }
    axiom axiom_index { forall a: Array, i: Int :: get_index(loc(a, i)) == i }
    axiom axiom_length { forall a: Array :: 0 <= length(a) }
}

method copy_odd(a: Array, b: Array, l: Int)
{
    var i: Int
    var j: Int

    i := 1
    j := 0
    while (i < l)
    {
        loc(a, j).val := loc(b, i).val
        i := i + 2
        j := j + 1
    }

    i := 1
    j := 0
    while (i < l)
    {
        assert loc(a, j).val == loc(b, 2 * j + 1).val
        i := i + 2
        j := j + 1
    }
}