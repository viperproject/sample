
field f: Ref
field g: Ref

method first_i_pre(a: Ref, b: Ref, read: Perm)
    requires none < read && read < write
    requires acc(a.f, read)
    requires acc(a.f.g, read)
    requires acc(a.f.g.f, read)
    requires acc(a.f.g.f.f, write)
{}

method first_i(a: Ref, b: Ref)
{
    a.f.g.f.f := null
}

method first_ii_pre(a: Ref, b: Ref, read: Perm)
    requires none < read && read < write
    requires acc(b.g, read)
    requires acc(a.f, write)
    requires acc(b.g.f, read)
    requires acc(b.g.f.f, write)
{}

method first_ii(a: Ref, b: Ref)
{
    a.f := b
    a.f.g.f.f := null
}

method first_iii_pre(a: Ref, b: Ref)
    requires acc(a.g, write)
    requires acc(a.f, write)
{}

method first_iii(a: Ref, b: Ref)
{
    a.f := a
    a.g := a
    a.f.g.f.f := null
}

method second_pre(a: Ref, b: Ref)
    requires acc(a.f, write)
    requires acc(b.f, write)
{}

method second(a: Ref, b: Ref)
{
    var i: Int

    a.f := b

    while (i < 10)
        // requires p > none
        // acc(a.f, p)
        // acc(a.f.f, write)
    {
        a.f.f := null
        i := i + 1
    }
}

method third_pre(a: Ref, b: Ref, c: Ref)
    requires acc(a.f, write)
    requires acc(b.f, write)
{}

method third(a: Ref, b: Ref, c: Ref)
{
    a.f := c
    b.f := c

    inhale acc(c.f)

    a.f.f := null
    b.f.f := null
}

method fourth_pre(a: Ref, b: Ref, c: Ref, x: Bool)
    requires acc(a.f, write)
    requires acc(b.f, write)
    requires acc(c.f, write)
{}

method fourth(a: Ref, b: Ref, c: Ref, x: Bool)
{
    if (x) {
        a.f := b
    } else {
        a.f := c
    }
    a.f.f := null
}

method fifth_pre(a: Ref, b: Ref, read: Perm)
    requires none < read && read < write
    requires acc(a.f, write)
    requires acc(b.f, read)
{}

method fifth(a: Ref, b: Ref)
{
    var c: Ref
    var d: Ref
    c := a
    c.f := b    // note that here we modify the heap
    d := a.f.f
}

method sixth_pre(a: Ref, b: Ref, c: Ref, d: Ref, t: Bool, read: Perm)
    requires none < read && read < write
    requires acc(a.f, write) && acc(a.f.f, write)
    requires acc(b.f, read) && acc(b.f.f, write)
    requires acc(c.f, read) && acc(c.f.f, write)
{}

method sixth(a: Ref, b: Ref, c: Ref, d: Ref, t: Bool)
{
    a.f.f := c.f
    if (t) {
        a.f := b.f
        a.f.f := c.f
    } else {
        a.f.f := b.f
    }
    a.f.f.f := d
}
