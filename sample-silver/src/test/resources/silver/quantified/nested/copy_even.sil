field val: Int

domain Array
{
    function loc(a: Array, i: Int): Ref
    function length(a: Array): Int
    function get_index(r: Ref): Int
    function get_array(r: Ref): Array

    axiom axiom_array { forall a: Array, i: Int :: get_array(loc(a, i)) == a }
    axiom axiom_index { forall a: Array, i: Int :: get_index(loc(a, i)) == i }
    axiom axiom_length { forall a: Array :: 0 <= length(a) }
}

method copy_even_a(a: Array)
{
    var i: Int
    var n: Int
    var t: Int

    i := 0
    n := length(a)

    while (i < n)
    {
        if (i % 2 == 0) {
            t := loc(a, i).val
        } else {
            loc(a, i).val := t
        }
        i := i + 1
    }
}

method copy_even_b(a: Array)
{
    var i: Int
    var n: Int
    var t: Int

    i := 0
    n := length(a)

    while (i < n - 1)
    {
        t := loc(a, i).val
        loc(a, i + 1).val := t
        i := i + 2
    }
}
