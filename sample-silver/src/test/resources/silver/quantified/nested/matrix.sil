field val: Int

domain Matrix
{
    function loc(m: Matrix, i: Int, j: Int): Ref
    function width(m: Matrix): Int
    function height(m: Matrix): Int

    axiom axiom_width { forall m: Matrix :: 0 <= width(m) }
    axiom axiom_height { forall m: Matrix :: 0 <= height(m) }
}

method fill(m: Matrix, v: Int)
{
    var i: Int
    var j: Int
    var w: Int
    var h: Int

    j := 0
    w := width(m)
    h := height(m)

    while (j < h)
    {
        i := 0
        while (i < w) {
            loc(m, i, j).val := v
            i := i + 1
        }
        j := j + 1
    }
}

method identity(m: Matrix)
{
    var i: Int
    var j: Int
    var w: Int
    var h: Int

    j := 0
    w := width(m)
    h := height(m)

    while (j < h)
    {
        i := 0
        while (i < w) {
            if (i == j) {
                loc(m, i, j).val := 1
            } else {
                loc(m, i, j).val := 0
            }
            i := i + 1
        }
        j := j + 1
    }
}
