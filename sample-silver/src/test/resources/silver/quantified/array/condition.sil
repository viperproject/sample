field val: Int

domain Array
{
    function loc(a: Array, i: Int): Ref
    function length(a: Array): Int
    function get_index(r: Ref): Int
    function get_array(r: Ref): Array

    axiom axiom_array { forall a: Array, i: Int :: { loc(a, i) } get_array(loc(a, i)) == a }
    axiom axiom_index { forall a: Array, i: Int :: { loc(a, i) } get_index(loc(a, i)) == i }
    axiom axiom_length { forall a: Array :: 0 <= length(a) }
}

method lower_expected(a: Array, i: Int, j: Int)
    requires i < j ==> acc(loc(a, i).val, 1 / 100)
    requires j <= i ==> acc(loc(a, j).val, 1 / 100)
    ensures true

method lower(a: Array, i: Int, j: Int) returns (r: Int)
{
    if (i < j) {
        r := loc(a, i).val
    } else {
        r := loc(a, j).val
    }
}