field val: Int

domain Array
{
    function loc(a: Array, i: Int): Ref
    function length(a: Array): Int
    function get_index(r: Ref): Int
    function get_array(r: Ref): Array

    axiom axiom_array { forall a: Array, i: Int :: { loc(a, i) } get_array(loc(a, i)) == a }
    axiom axiom_index { forall a: Array, i: Int :: { loc(a, i) } get_index(loc(a, i)) == i }
    axiom axiom_length { forall a: Array :: 0 <= length(a) }
}

method main(a: Array) returns (pos: Int, neg: Int)
{
    var i: Int
    var l: Int

    i := 0
    l := length(a)

    pos := 0
    neg := 0

    while (i < l)
    {
        while (loc(a, i).val < 0)
        {
            loc(a, i).val := loc(a, i).val + 1
            neg := neg + 1
        }
        while (0 < loc(a, i).val)
        {
            loc(a, i).val := loc(a, i).val - 1
            pos := pos + 1
        }
        i := i + 1
    }
}
