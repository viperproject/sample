field val: Int

domain Array
{
    function loc(a: Array, i: Int): Ref
    function length(a: Array): Int
    function get_index(r: Ref): Int
    function get_array(r: Ref): Array

    axiom axiom_array { forall a: Array, i: Int :: get_array(loc(a, i)) == a }
    axiom axiom_index { forall a: Array, i: Int :: get_index(loc(a, i)) == i }
    axiom axiom_length { forall a: Array :: 0 <= length(a) }
}

/*method main_expected(a: Array, read: Perm)
  requires none < read && read < write
  requires forall q: Int :: 0 <= q && q < length(a) ==> acc(loc(a, q).val)
  ensures true*/

method main(a: Array)
{
    var i: Int
    var j: Int
    var t: Int
    var l: Int

    i := 1
    l := length(a)

    while (i < l)
    {
        t := loc(a, i).val
        j := i

        while (0 < j && loc(a, j - 1).val > t) {
            loc(a, j).val := loc(a, j - 1).val
            j := j - 1
        }

        loc(a, j).val := t
        i := i + 1
    }
}
