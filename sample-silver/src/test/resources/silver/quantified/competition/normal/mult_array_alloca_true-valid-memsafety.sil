field val: Int

domain Array
{
    function loc(a: Array, i: Int): Ref
    function length(a: Array): Int
    function get_index(r: Ref): Int
    function get_array(r: Ref): Array

    axiom axiom_array { forall a: Array, i: Int :: get_array(loc(a, i)) == a }
    axiom axiom_index { forall a: Array, i: Int :: get_index(loc(a, i)) == i }
    axiom axiom_length { forall a: Array :: 0 <= length(a) }
}

method main_expected(a1: Array, a2: Array, read: Perm)
    requires none < read && read < write
    requires forall q0: Array, q1: Int :: q0 == a1 && 0 <= q1 && q1 < length(a1) || q0 == a2 && 0 <= q1 && q1 < length(a2) ==> acc(loc(q0, q1).val)
    ensures true

method main(a1: Array, a2: Array)
{
    var i: Int
    var j: Int
    var r: Int
    var l1: Int
    var l2: Int

    l1 := length(a1)
    l2 := length(a2)

    if (1 <= l1)
    {
        i := 0
        while (i < l1)
        {
            r := 23 // random()
            loc(a1, i).val := r
            i := i + 1
        }

        j := 0
        while (j < l2)
        {
            loc(a2, j).val := loc(a1, i % l1).val
            j := j + 1
        }
    }
}
