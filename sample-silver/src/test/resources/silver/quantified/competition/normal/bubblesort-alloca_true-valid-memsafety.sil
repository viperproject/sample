field val: Int

domain Array
{
    function loc(a: Array, i: Int): Ref
    function length(a: Array): Int
    function get_index(r: Ref): Int
    function get_array(r: Ref): Array

    axiom axiom_array { forall a: Array, i: Int :: { loc(a, i) } get_array(loc(a, i)) == a }
    axiom axiom_index { forall a: Array, i: Int :: { loc(a, i) } get_index(loc(a, i)) == i }
    axiom axiom_length { forall a: Array :: 0 <= length(a) }
}

method main_expected(a: Array, read: Perm)
    requires none < read && read < write
    requires forall q: Int :: 0 <= q && q < length(a) && 2 <= length(a) ==> acc(loc(a, q).val)
    ensures true

method main(a: Array)
{
    var i: Int
    var j: Int
    var l: Int
    var t: Int

    l := length(a)
    i := l - 1

    while (0 <= i)
    {
        j := 1
        while (j <= i)
        {
            if (loc(a, j).val < loc(a, j - 1).val)
            {
                t := loc(a, j - 1).val
                loc(a, j - 1).val := loc(a, j).val
                loc(a, j).val := t
            }
            j := j + 1
        }
        i := i - 1
    }
}
