field val: Int

domain Array
{
    function loc(a: Array, i: Int): Ref
    function length(a: Array): Int
    function get_index(r: Ref): Int
    function get_array(r: Ref): Array

    axiom axiom_array { forall a: Array, i: Int :: get_array(loc(a, i)) == a }
    axiom axiom_index { forall a: Array, i: Int :: get_index(loc(a, i)) == i }
    axiom axiom_length { forall a: Array :: 0 <= length(a) }
}

method main_expected(a: Array, b: Array, d: Array, read: Perm)
  requires none < read && read < write
  requires forall q0: Array, q1: Int ::
    (q0 == a && 0 <= q1 && q1 < length(a)) ||
    (q0 == b && 0 <= q1 && q1 < length(b)) ||
    (q0 == d && 0 <= q1) ==> acc(loc(q0, q1).val)

method main(a: Array, b: Array, d: Array)
{
    var i: Int
    var j: Int
    var k: Int
    var la: Int
    var lb: Int
    var found: Bool

    i := 0
    k := 0
    la := length(a)
    lb := length(b)

    while (i < la)
    {
        j := 0
        found := false
        while (j < lb && !found)
        {
            if (loc(a, i).val == loc(b, j).val)
            {
                found := true
            }
            else
            {
                j := j + 1
            }
        }
        if (!found)
        {
            loc(d, k).val := loc(a, i).val
            k := k + 1
        }
        i := i + 1
    }
}
