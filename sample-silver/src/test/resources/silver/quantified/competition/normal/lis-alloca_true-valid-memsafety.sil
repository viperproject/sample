field val: Int

domain Array
{
    function loc(a: Array, i: Int): Ref
    function length(a: Array): Int
    function get_index(r: Ref): Int
    function get_array(r: Ref): Array

    axiom axiom_array { forall a: Array, i: Int :: get_array(loc(a, i)) == a }
    axiom axiom_index { forall a: Array, i: Int :: get_index(loc(a, i)) == i }
    axiom axiom_length { forall a: Array :: 0 <= length(a) }
}

method main_expected(a: Array, b: Array, p: Array, read: Perm)
    requires none < read && read < write
    requires forall q0: Array, q1: Int :: (q0 == a || q0 == b || q0 == p) && 0 <= q1 && q1 <= length(a) ==> acc(loc(q0, q1).val)

method main(a: Array, b: Array, p: Array)
{
    var i: Int
    var j: Int
    var m: Int
    var l: Int

    m := 0
    l := length(a)

    i := 0
    while (i < l)
    {
        loc(b, i).val := 1
        loc(p, i).val := i
        i := i + 1
    }

    i := 1
    while (i < l)
    {
        j := 0
        while (j < i)
        {
            if (loc(a, j).val < loc(a, i).val && loc(b, i).val < loc(b, j).val + 1) {
                loc(b, i).val := loc(b, j).val + 1
                loc(p, i).val := j
            }
            j := j + 1
        }
        i := i + 1
    }

    i := 0
    while (i < l)
    {
        if (m < loc(b, i).val)
        {
            m := loc(b, i).val
        }
        i := i + 1
    }
}
