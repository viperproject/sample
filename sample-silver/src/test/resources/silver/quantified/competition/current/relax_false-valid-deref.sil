field val: Int

domain Array
{
    function loc(a: Array, i: Int): Ref
    function length(a: Array): Int
    function get_index(r: Ref): Int
    function get_array(r: Ref): Array

    axiom axiom_array { forall a: Array, i: Int :: get_array(loc(a, i)) == a }
    axiom axiom_index { forall a: Array, i: Int :: get_index(loc(a, i)) == i }
    axiom axiom_length { forall a: Array :: 0 <= length(a) }
}

method main(p: Array, a: Array) returns (r: Bool)
{
    var i: Int
    var shift: Int
    var p_len: Int
    var a_len: Int

    a_len := length(a)
    p_len := length(p)

    if (a_len + 1 < p_len)
    {
        r := false
    }
    else
    {
        shift := 0
        i := 0

        while (i < p_len && i < a_len)
        {
            if (loc(p, i).val != loc(a, i - shift).val)
            {
                if (shift == 0)
                {
                    shift := 1
                }
                else
                {
                    r := false
                    // this should be a return that's why we kill the branch
                    assume false
                }
            }
            i := i + 1
        }

        if (a_len < p_len && shift == 1)
        {
            r := false
        }
        else
        {
            r := true
        }
    }
}