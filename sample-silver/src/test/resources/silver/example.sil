field val: Int

domain Array
{
    function loc(a: Array, i: Int): Ref
    function length(a: Array): Int
    function get_index(r: Ref): Int
    function get_array(r: Ref): Array

    axiom axiom_array { forall a: Array, i: Int :: get_array(loc(a, i)) == a }
    axiom axiom_index { forall a: Array, i: Int :: get_index(loc(a, i)) == i }
    axiom axiom_length { forall a: Array :: 0 <= length(a) }
}

method bubblesort(a: Array)
{
    var i: Int
    var j: Int
    var n: Int

    i := 1
    n := length(a)

    while (i < n)
    {
        j := 0
        while (j < n - i)
        {
            var u: Int
            var v: Int

            u := loc(a, j).val
            v := loc(a, j + 1).val

            if (v < u) {
                loc(a, j).val := v
                loc(a, j + 1).val := u
            }

            j := j + 1
        }
        i := i + 1
    }
}

/*method main(a: Array)
{
    var i: Int
    var l: Int
    var t: Int

    i := 0
    l := length(a)

    while (i < l - 1)
    {
        inhale acc(loc(a, i).val)
        t := loc(a, i).val
        exhale acc(loc(a, i).val)
        i := i + 1
    }
}*/